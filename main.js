/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __toBinary = /* @__PURE__ */ (() => {
  var table = new Uint8Array(128);
  for (var i = 0; i < 64; i++)
    table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    var n = base64.length, bytes = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
    for (var i2 = 0, j = 0; i2 < n; ) {
      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SourceScanner
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// ts/ScannerSettingsTab.ts
var import_obsidian = require("obsidian");
var electron = require("electron").remote;
var dialog = electron.dialog;
var ScannerSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    if (this.plugin.intervalHandle) {
      new import_obsidian.Setting(containerEl).setName("Scanner is running").setDesc("Please shutdown the scanner before updating the settings");
    } else {
      var appPathSetting = new import_obsidian.Setting(containerEl);
      appPathSetting.setName("Application Path").setDesc(`Application workspace: ${this.plugin.settings.applicationPath}`).addButton((button) => button.setButtonText("SELECT APPLICATION PATH").onClick((cb) => {
        dialog.showOpenDialog({ properties: ["openDirectory"] }).then(async (result) => {
          console.log(result.canceled);
          console.log(result.filePaths);
          this.plugin.settings.applicationPath = result.filePaths[0];
          appPathSetting.setDesc(`Application workspace: ${this.plugin.settings.applicationPath}`);
          await this.plugin.saveSettings();
        }).catch((err) => {
          console.log(err);
        });
      }));
      var testPathSetting = new import_obsidian.Setting(containerEl);
      testPathSetting.setName("Test Path").setDesc(`Test workspace: ${this.plugin.settings.unitTestPath}`).addButton((button) => button.setButtonText("SELECT UNIT TEST PATH").onClick((cb) => {
        dialog.showOpenDialog({ properties: ["openDirectory"] }).then(async (result) => {
          console.log(result.canceled);
          console.log(result.filePaths);
          this.plugin.settings.unitTestPath = result.filePaths[0];
          testPathSetting.setDesc(`Test workspace: ${this.plugin.settings.unitTestPath}`);
          await this.plugin.saveSettings();
        }).catch((err) => {
          console.log(err);
        });
      }));
      new import_obsidian.Setting(containerEl).setName("Documentation Path").setDesc("Path to document workspace relative from vault").addText((text) => text.setPlaceholder("Enter the documentation path").setValue(this.plugin.settings.documentPath).onChange(async (value) => {
        this.plugin.settings.documentPath = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(containerEl).setName("Application type").setDesc("Type of application (.java .js etc)").addDropdown((dropDown) => dropDown.addOption(".java", "java").setValue(".java").onChange(async (value) => {
        this.plugin.settings.applicationExtension = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(containerEl).setName("Activation interval").setDesc("Activation interval in ms").addText((text) => text.setPlaceholder("Enter the activation interval").setValue(this.plugin.settings.sleepLength.toString()).onChange(async (value) => {
        this.plugin.settings.sleepLength = parseInt(value);
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(containerEl).setName("Number of source files to process").setDesc("Number of source files to process at a time").addText((text) => text.setPlaceholder("Enter the source file processing count").setValue(this.plugin.settings.groupBySize.toString()).onChange(async (value) => {
        this.plugin.settings.groupBySize = parseInt(value);
        await this.plugin.saveSettings();
      }));
    }
  }
};

// ts/ScanSource.ts
var import_fs2 = require("fs");

// ts/Utils.ts
var import_fs = require("fs");

// ts/DocFolders.ts
var DocFolders = class {
  constructor(storyFolder, solutionFolder, markerMapping, commentMapping, testCommentMapping, settingsUnitTestMapping) {
    this.settingsStoryFolder = storyFolder;
    this.settingsSolutionFolder = solutionFolder;
    this.settingsMarkerFolder = markerMapping;
    this.settingsCommentFolder = commentMapping;
    this.settingsTestCommentFolder = testCommentMapping;
    this.settingsUnitTestFolder = settingsUnitTestMapping;
  }
};

// ts/Utils.ts
var path = require("path").remote;
var Utils = class {
  constructor(app) {
    this.separator = "/";
    this.markerRegExp = /\s\^[a-zA-Z]+[a-zA-Z0-9]+\-[0-9]+(\-[a-zA-Z]+[a-zA-Z0-9]+\-[0-9]+)*/g;
    this.app = app;
    this.fsa = this.app.vault.adapter;
  }
  toVaultTypeSeperator() {
    if (this.separator == "\\") {
      return "/";
    } else {
      return "/";
    }
  }
  walkInFolderFromDir(dir, files) {
    const fileList = (0, import_fs.readdirSync)(dir);
    for (const file of fileList) {
      var name = `${dir}${this.separator}${file}`;
      if ((0, import_fs.statSync)(name).isDirectory()) {
        this.walkInFolderFromDir(name, files);
      } else {
        files.push(name);
      }
    }
    return files;
  }
  filterFileNamesByExtension(extension, files) {
    var result = new Array();
    result = files.filter((fileName) => {
      return fileName.endsWith(extension);
    });
    return result;
  }
  listMDFilesInVault(folder) {
    const commentBasePath = `${this.fsa.getBasePath()}${this.separator}${folder}`;
    return this.filterFileNamesByExtension(".md", this.walkInFolderFromDir(commentBasePath, [])).map((value) => {
      var fileName = value.replace(`${this.fsa.getBasePath()}`, "");
      while (fileName.contains(`\\`)) {
        fileName = fileName.replace(`${this.separator}`, "/");
      }
      return fileName;
    });
  }
  makeDirInVault(filePathAndName) {
    var filePath = filePathAndName.split(this.toVaultTypeSeperator());
    filePath = filePath.slice(0, filePath.length - 1).slice(1);
    filePath[0] = `/${filePath[0]}`;
    var constructedPath = [];
    while (filePath.length > 0) {
      constructedPath.push(filePath[0]);
      this.fsa.mkdir(constructedPath.join("/"));
      filePath = filePath.slice(1);
    }
  }
  sortSetOfString(set) {
    const sortedArray = Array.from(set).sort();
    return new Set(sortedArray);
  }
  createFolders(docPath) {
    const settingsBase1 = `${this.fsa.getBasePath()}${this.separator}${docPath}${this.separator}`;
    const settingsStoryFolder1 = settingsBase1 + "stories";
    const settingsSolutionFolder1 = settingsBase1 + "solutions";
    const settingsMarkerMapping1 = settingsBase1 + "marker";
    const settingsCommentsMapping1 = settingsBase1 + "comments";
    const settingsTestCommentsMapping1 = settingsBase1 + "test comments";
    const settingsUnitTestMapping1 = settingsBase1 + "unit tests";
    (0, import_fs.mkdirSync)(settingsStoryFolder1, { recursive: true });
    (0, import_fs.mkdirSync)(settingsSolutionFolder1, { recursive: true });
    (0, import_fs.mkdirSync)(settingsMarkerMapping1, { recursive: true });
    (0, import_fs.mkdirSync)(settingsCommentsMapping1, { recursive: true });
    (0, import_fs.mkdirSync)(settingsTestCommentsMapping1, { recursive: true });
    (0, import_fs.mkdirSync)(settingsUnitTestMapping1, { recursive: true });
    const settingsBase = `${docPath}${this.separator}`;
    const settingsStoryFolder = settingsBase + "stories";
    const settingsSolutionFolder = settingsBase + "solutions";
    const settingsMarkerMapping = settingsBase + "marker";
    const settingsCommentsMapping = settingsBase + "comments";
    const settingsTestCommentsMapping = settingsBase + "test comments";
    const settingsUnitTestMapping = settingsBase + "unit tests";
    return new DocFolders(settingsStoryFolder, settingsSolutionFolder, settingsMarkerMapping, settingsCommentsMapping, settingsTestCommentsMapping, settingsUnitTestMapping);
  }
};

// ts/ScanSource.ts
var ScanSource = class {
  constructor() {
    this.phaseCount = 0;
    this.sourceAndDocumentLink = /* @__PURE__ */ new Set();
  }
  init(app, plugin, scanner) {
    this.codeScanner = scanner;
    this.applicationPath = plugin.settings.applicationPath;
    this.codeExtension = plugin.settings.applicationExtension;
    this.documentPath = plugin.settings.documentPath;
    this.testPath = plugin.settings.unitTestPath;
    this.groupBySize = plugin.settings.groupBySize;
    this.sleepLength = plugin.settings.sleepLength;
    this.utils = new Utils(app);
    this.fsa = app.vault.adapter;
    return setInterval(() => this.run(), this.sleepLength);
  }
  run() {
    this.docFolders = this.utils.createFolders(this.documentPath);
    if (this.phaseCount == 1) {
      const impFiles = this.utils.filterFileNamesByExtension(this.codeExtension, this.utils.walkInFolderFromDir(this.applicationPath, []));
      this.applicationFileListWithExtension = [];
      for (let i = 0; i < impFiles.length; i += this.groupBySize) {
        const chunk = impFiles.slice(i, i + this.groupBySize);
        this.applicationFileListWithExtension.push(chunk);
      }
      const testFiles = this.utils.filterFileNamesByExtension(this.codeExtension, this.utils.walkInFolderFromDir(this.testPath, []));
      this.testFileListWithExtension = [];
      for (let i = 0; i < testFiles.length; i += this.groupBySize) {
        const chunk = testFiles.slice(i, i + this.groupBySize);
        this.testFileListWithExtension.push(chunk);
      }
    }
    if (this.phaseCount == 2) {
      const files = this.utils.filterFileNamesByExtension(".md", this.utils.walkInFolderFromDir(this.fsa.getBasePath() + this.utils.separator + this.docFolders.settingsCommentFolder, []));
      this.documentFileListWithExtension = files.map((fileName) => {
        return fileName.replace(this.fsa.getBasePath() + this.utils.separator, "");
      });
    }
    if (this.phaseCount == 3 && this.applicationFileListWithExtension.length > 0) {
      const filesToCheck = this.applicationFileListWithExtension.pop();
      if (filesToCheck != void 0) {
        filesToCheck.forEach((srcFile) => {
          const documentName = this.createDocNameFromSourceName(srcFile, this.applicationPath);
          const documentNameAndPath = `${this.documentPath}${this.utils.separator}comments${this.utils.separator}${documentName}`;
          const docFullPathname = `${this.fsa.getBasePath()}${this.utils.separator}${documentNameAndPath}`;
          this.sourceAndDocumentLink.add(documentNameAndPath);
          this.doActualScanning(documentNameAndPath, srcFile, docFullPathname);
        });
        this.phaseCount = 2;
      }
    }
    if (this.phaseCount == 4 && this.testFileListWithExtension.length > 0) {
      const filesToCheck = this.testFileListWithExtension.pop();
      if (filesToCheck != void 0) {
        filesToCheck.forEach((srcFile) => {
          const testDocumentName = this.createDocNameFromSourceName(srcFile, this.testPath);
          const testDocumentNameAndPath = `${this.documentPath}${this.utils.separator}test comments${this.utils.separator}${testDocumentName}`;
          const docFullPathname = `${this.fsa.getBasePath()}${this.utils.separator}${testDocumentNameAndPath}`;
          this.doActualScanning(testDocumentNameAndPath, srcFile, docFullPathname);
        });
        this.phaseCount = 4;
      }
    }
    if (this.phaseCount == 5) {
      this.documentFileListWithExtension.forEach((fileName) => {
        if (!this.sourceAndDocumentLink.has(fileName)) {
          this.utils.fsa.remove(fileName);
        }
      });
      this.sourceAndDocumentLink.clear();
      this.phaseCount = -1;
    }
    this.phaseCount += 1;
  }
  doActualScanning(documentNameAndPath, srcFile, docFullPathname) {
    this.sourceAndDocumentLink.add(documentNameAndPath);
    const srcFileExists = (0, import_fs2.existsSync)(srcFile);
    if (!srcFileExists) {
      console.info("Test source file gone " + srcFile);
    } else {
      const srcStat = (0, import_fs2.statSync)(srcFile);
      var createdFile = false;
      const docFileExists = (0, import_fs2.existsSync)(docFullPathname);
      var docStat;
      var createdFile = false;
      if (docFileExists) {
        docStat = (0, import_fs2.statSync)(docFullPathname);
      } else {
        (0, import_fs2.writeFileSync)(docFullPathname, "");
        createdFile = true;
      }
      docStat = (0, import_fs2.statSync)(docFullPathname);
      if (createdFile || docStat.mtimeMs < srcStat.mtimeMs) {
        const srcLines = (0, import_fs2.readFileSync)(srcFile, { encoding: "utf8", flag: "r" });
        var allComments = this.codeScanner(srcLines).replaceAll(/\n\s+\*/g, "\n");
        const headerComment = `[Source](file://${srcFile})

---
`;
        this.fsa.write(documentNameAndPath, headerComment + allComments);
      }
    }
  }
  createDocNameFromSourceName(sourceFile, applicationPath) {
    var fileName = sourceFile.replace(applicationPath + this.utils.separator, "").replace(this.codeExtension, ".md");
    while (fileName.contains(this.utils.separator)) {
      fileName = fileName.replace(this.utils.separator, ".");
    }
    return fileName;
  }
  createRelativePath(sourceFile, documentPart) {
    var sourceFileParts = sourceFile.split(this.utils.separator);
    var documentAndPathParts = `${this.utils.fsa.getBasePath()}/${documentPart}`.split("/");
    while (sourceFileParts[0] == documentAndPathParts[0]) {
      sourceFileParts = sourceFileParts.slice(1);
      documentAndPathParts = documentAndPathParts.slice(1);
    }
    return documentAndPathParts.filter((value) => {
      return !value.endsWith(".md");
    }).map((value) => "..").concat(sourceFileParts).join("/");
  }
};

// ts/CrossCuttingConcerns.ts
var CrossCuttingConcerns = class {
  constructor(app, docFolders) {
    this.utils = new Utils(app);
    this.fsa = this.utils.fsa;
    this.docFolders = docFolders;
  }
  generateCrossCuttingConcerns() {
    const documentToMarkerMap = /* @__PURE__ */ new Map();
    const testDocumentToMarkerMap = /* @__PURE__ */ new Map();
    const storyToMarkerMap = /* @__PURE__ */ new Map();
    const testStoryToMarkerMap = /* @__PURE__ */ new Map();
    const markerToStoryMap = /* @__PURE__ */ new Map();
    const markerToTestStoryMap = /* @__PURE__ */ new Map();
    const markerToDocumentMap = /* @__PURE__ */ new Map();
    const markerToTestDocumentMap = /* @__PURE__ */ new Map();
    const promise = new Array();
    const solutionFileToDelete = this.utils.listMDFilesInVault(this.docFolders.settingsSolutionFolder);
    solutionFileToDelete.forEach((file) => {
      promise.push(this.fsa.remove(file));
    });
    Promise.allSettled(promise).then((value) => {
      this.fsa.rmdir(this.docFolders.settingsSolutionFolder, true);
      this.fsa.mkdir(this.docFolders.settingsSolutionFolder);
      const commentMDFiles = this.utils.listMDFilesInVault(this.docFolders.settingsCommentFolder);
      const testCommentMDFiles = this.utils.listMDFilesInVault(this.docFolders.settingsTestCommentFolder);
      const storyMDFiles = this.utils.listMDFilesInVault(this.docFolders.settingsStoryFolder);
      const testStoryMDFiles = this.utils.listMDFilesInVault(this.docFolders.settingsUnitTestFolder);
      const allPromises = new Array();
      commentMDFiles.forEach((commentFile) => {
        allPromises.push(this.fsa.read(commentFile).then((value2) => {
          var markerSet = /* @__PURE__ */ new Set();
          const markersMatch = value2.matchAll(this.utils.markerRegExp);
          Array.from(markersMatch).forEach((marker) => {
            markerSet.add(marker[0].trim());
          });
          markerSet = this.utils.sortSetOfString(markerSet);
          const documentName = commentFile.split("/").last();
          markerSet.forEach((marker) => {
            markerToDocumentMap.set(marker.trim(), documentName);
          });
          if (documentName != void 0) {
            documentToMarkerMap.set(documentName, markerSet);
          }
        }));
      });
      testCommentMDFiles.forEach((commentFile) => {
        allPromises.push(this.fsa.read(commentFile).then((value2) => {
          var markerSet = /* @__PURE__ */ new Set();
          const markersMatch = value2.matchAll(this.utils.markerRegExp);
          Array.from(markersMatch).forEach((marker) => {
            markerSet.add(marker[0].trim());
          });
          markerSet = this.utils.sortSetOfString(markerSet);
          const documentName = commentFile.split("/").last();
          markerSet.forEach((marker) => {
            markerToTestDocumentMap.set(marker.trim(), documentName);
          });
          if (documentName != void 0) {
            testDocumentToMarkerMap.set(documentName, markerSet);
          }
        }));
      });
      storyMDFiles.forEach((storyFile) => {
        allPromises.push(this.fsa.read(storyFile).then((value2) => {
          var markerSet = /* @__PURE__ */ new Set();
          const markersMatch = value2.matchAll(this.utils.markerRegExp);
          Array.from(markersMatch).forEach((marker) => {
            markerSet.add(marker[0].trim());
          });
          markerSet = this.utils.sortSetOfString(markerSet);
          const documentName = storyFile.split("/").last();
          markerSet.forEach((marker) => {
            markerToStoryMap.set(marker.trim(), storyFile);
          });
          if (documentName != void 0) {
            storyToMarkerMap.set(documentName, markerSet);
          }
        }));
      });
      testStoryMDFiles.forEach((storyFile) => {
        allPromises.push(this.fsa.read(storyFile).then((value2) => {
          var markerSet = /* @__PURE__ */ new Set();
          const markersMatch = value2.matchAll(this.utils.markerRegExp);
          Array.from(markersMatch).forEach((marker) => {
            markerSet.add(marker[0].trim());
          });
          markerSet = this.utils.sortSetOfString(markerSet);
          const documentName = storyFile.split("/").last();
          markerSet.forEach((marker) => {
            markerToTestStoryMap.set(this.dropRightAndMkString(marker.trim().split("-"), 4, "-"), storyFile);
          });
          if (documentName != void 0) {
            testStoryToMarkerMap.set(documentName, markerSet);
          }
        }));
      });
      Promise.allSettled(allPromises).then((value2) => {
        var listOfMarkers = [];
        var unitTestMarkers = [];
        Array.from(documentToMarkerMap.values()).forEach((setOfMarkers) => {
          const loalListOfMarkers = Array.from(setOfMarkers);
          listOfMarkers = listOfMarkers.concat(loalListOfMarkers);
        });
        Array.from(testDocumentToMarkerMap.values()).forEach((setOfMarkers) => {
          const loalListOfMarkers = Array.from(setOfMarkers);
          unitTestMarkers = unitTestMarkers.concat(loalListOfMarkers);
        });
        listOfMarkers.sort((a, b) => a.localeCompare(b));
        unitTestMarkers.sort((a, b) => a.localeCompare(b));
        var allMarkers = this.groupedMap(listOfMarkers, (i) => this.solutionDocNameFromMarker(i));
        var allUnitTestMarkers = this.groupedUnitTestMap(unitTestMarkers);
        Array.from(allMarkers).forEach(([solName, markers]) => {
          var mdString = `# ${this.dropRightAndMkString(solName.split("/"), 1, " ").toUpperCase()}
`;
          var markerToStory = new Map(Array.from(markerToStoryMap.entries()).filter(([key]) => {
            const splitMarker = key.split("-");
            return markers[0].startsWith(this.dropRightAndMkString(splitMarker, 1, "-"));
          }));
          mdString = mdString + "## Functional Requirement\n";
          markerToStory.forEach((story, marker2) => {
            if (markerToStoryMap.get(marker2) != void 0) {
              mdString = mdString + `![[${markerToStoryMap.get(marker2)}#${marker2.trim()}]]
`;
            }
          });
          const uniqueMakers = Array.from(new Set(markers));
          uniqueMakers.forEach((marker2, story) => {
            mdString = mdString + "## Implimentation Solution\n";
            if (markerToDocumentMap.get(marker2) != void 0) {
              const document2 = markerToDocumentMap.get(marker2);
              mdString = mdString + `![[${document2}#${marker2.trim()}]]
`;
              if (allUnitTestMarkers.get(marker2) != void 0) {
                mdString = mdString + "### Unit Test Implementation\n";
                allUnitTestMarkers.get(marker2).forEach((marker3) => {
                  if (this.isTestMarker(marker3)) {
                    mdString = mdString + `![[${markerToTestDocumentMap.get(marker3)}#${marker3.trim()}]]
`;
                  }
                });
              }
            }
          });
          const marker = this.dropRightAndMkString(markers[0].substring(1).split("-"), 1, "-");
          const solNameWithPath = this.getSolutionFileName(solName);
          this.utils.makeDirInVault(solNameWithPath);
          this.fsa.write(solNameWithPath, mdString);
        });
      });
    });
  }
  dropRightAndMkString(values, n, delimiter) {
    return values.slice(0, values.length - n).join(delimiter);
  }
  dropLeftAndMkString(values, n, delimiter) {
    return values.slice(n, values.length - n).join(delimiter);
  }
  getSolutionFileName(solName) {
    const fileName = solName.split(this.utils.toVaultTypeSeperator()).join("/");
    return `/${fileName}`;
  }
  solutionDocNameFromMarker(marker) {
    const markerList = marker.substring(1).split("-");
    var docName = "";
    if (markerList.length == 6) {
      docName = this.dropRightAndMkString(markerList, 3, "/");
    } else {
      docName = this.dropRightAndMkString(markerList, 1, "/");
    }
    const solutionName = `${docName}.md`;
    return `${this.docFolders.settingsSolutionFolder}${"/"}${solutionName}`;
  }
  groupedMap(array, getKey) {
    return array.reduce((map, currentValue) => {
      const key = getKey(currentValue);
      if (!map.has(key)) {
        map.set(key, []);
      }
      if (map.get(key) != void 0) {
        map?.get(key)?.push(currentValue);
      }
      return map;
    }, /* @__PURE__ */ new Map());
  }
  groupedUnitTestMap(array) {
    return array.reduce((map, currentValue) => {
      const key = currentValue.split("-");
      const keyValue = this.dropRightAndMkString(key, 2, "-");
      if (!map.has(keyValue)) {
        map.set(keyValue, []);
      }
      if (map.get(keyValue) != void 0) {
        map?.get(keyValue)?.push(currentValue);
      }
      return map;
    }, /* @__PURE__ */ new Map());
  }
  isTestMarker(marker) {
    return marker.split("-").length == 6;
  }
};

// ts/MarkerGroupList.ts
var MarkerGroupList = class {
  constructor(app, docFolders) {
    this.markerFileWithPath = `${docFolders.settingsMarkerFolder}/marker-table.md`;
    this.utils = new Utils(app);
    this.docFolders = docFolders;
  }
  generateMakerGroupList() {
    const markerToDocumentMap = /* @__PURE__ */ new Map();
    const allSolutionFiles = new Array();
    const commentFiles = this.utils.listMDFilesInVault(this.docFolders.settingsCommentFolder);
    const promise = new Array();
    commentFiles.forEach((commentFile) => {
      promise.push(this.utils.fsa.read(commentFile).then((value) => {
        var markerSet = /* @__PURE__ */ new Set();
        const markersMatch = value.matchAll(this.utils.markerRegExp);
        Array.from(markersMatch).forEach((marker) => {
          markerSet.add(marker[0].trim());
        });
        markerSet = this.utils.sortSetOfString(markerSet);
        const documentName = commentFile.split("/").last();
        markerSet.forEach((marker) => {
          if (!markerToDocumentMap.has(marker.trim())) {
            markerToDocumentMap.set(marker, /* @__PURE__ */ new Set());
          }
          markerToDocumentMap.get(marker.trim())?.add(commentFile);
        });
      }));
    });
    Promise.allSettled(promise).then((value) => {
      var allMarkers = new Set(Array.from(markerToDocumentMap.keys()));
      allMarkers = this.utils.sortSetOfString(allMarkers);
      var mdString = `|marker|document|
`;
      mdString = mdString + `|------|--------|
`;
      allMarkers.forEach((marker) => {
        const docNameSet = markerToDocumentMap.get(marker);
        docNameSet?.forEach((docName) => {
          mdString = mdString + `|${marker.substring(1)}|[[${docName}#${marker}]]
`;
        });
      });
      this.utils.fsa.write(this.markerFileWithPath, mdString);
    });
  }
};

// pkg/obsidian_rust_plugin.js
var import_meta = {};
var wasm;
var heap = new Array(32).fill(void 0);
heap.push(void 0, null, true, false);
function getObject(idx) {
  return heap[idx];
}
var heap_next = heap.length;
function dropObject(idx) {
  if (idx < 36)
    return;
  heap[idx] = heap_next;
  heap_next = idx;
}
function takeObject(idx) {
  const ret = getObject(idx);
  dropObject(idx);
  return ret;
}
var WASM_VECTOR_LEN = 0;
var cachedUint8Memory0 = new Uint8Array();
function getUint8Memory0() {
  if (cachedUint8Memory0.byteLength === 0) {
    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
  }
  return cachedUint8Memory0;
}
var cachedTextEncoder = new TextEncoder("utf-8");
var encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg, view) {
  return cachedTextEncoder.encodeInto(arg, view);
} : function(arg, view) {
  const buf = cachedTextEncoder.encode(arg);
  view.set(buf);
  return {
    read: arg.length,
    written: buf.length
  };
};
function passStringToWasm0(arg, malloc, realloc) {
  if (realloc === void 0) {
    const buf = cachedTextEncoder.encode(arg);
    const ptr2 = malloc(buf.length);
    getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);
    WASM_VECTOR_LEN = buf.length;
    return ptr2;
  }
  let len = arg.length;
  let ptr = malloc(len);
  const mem = getUint8Memory0();
  let offset = 0;
  for (; offset < len; offset++) {
    const code = arg.charCodeAt(offset);
    if (code > 127)
      break;
    mem[ptr + offset] = code;
  }
  if (offset !== len) {
    if (offset !== 0) {
      arg = arg.slice(offset);
    }
    ptr = realloc(ptr, len, len = offset + arg.length * 3);
    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
    const ret = encodeString(arg, view);
    offset += ret.written;
  }
  WASM_VECTOR_LEN = offset;
  return ptr;
}
function isLikeNone(x) {
  return x === void 0 || x === null;
}
var cachedInt32Memory0 = new Int32Array();
function getInt32Memory0() {
  if (cachedInt32Memory0.byteLength === 0) {
    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
  }
  return cachedInt32Memory0;
}
var cachedTextDecoder = new TextDecoder("utf-8", { ignoreBOM: true, fatal: true });
cachedTextDecoder.decode();
function getStringFromWasm0(ptr, len) {
  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
function addHeapObject(obj) {
  if (heap_next === heap.length)
    heap.push(heap.length + 1);
  const idx = heap_next;
  heap_next = heap[idx];
  heap[idx] = obj;
  return idx;
}
function scan_for_comments(str) {
  const ret = wasm.scan_for_comments(addHeapObject(str));
  return takeObject(ret);
}
async function load(module2, imports) {
  if (typeof Response === "function" && module2 instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming === "function") {
      try {
        return await WebAssembly.instantiateStreaming(module2, imports);
      } catch (e) {
        if (module2.headers.get("Content-Type") != "application/wasm") {
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
        } else {
          throw e;
        }
      }
    }
    const bytes = await module2.arrayBuffer();
    return await WebAssembly.instantiate(bytes, imports);
  } else {
    const instance = await WebAssembly.instantiate(module2, imports);
    if (instance instanceof WebAssembly.Instance) {
      return { instance, module: module2 };
    } else {
      return instance;
    }
  }
}
function getImports() {
  const imports = {};
  imports.wbg = {};
  imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
    takeObject(arg0);
  };
  imports.wbg.__wbindgen_string_get = function(arg0, arg1) {
    const obj = getObject(arg1);
    const ret = typeof obj === "string" ? obj : void 0;
    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
  };
  imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
    const ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
  };
  imports.wbg.__wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
  };
  return imports;
}
function initMemory(imports, maybe_memory) {
}
function finalizeInit(instance, module2) {
  wasm = instance.exports;
  init.__wbindgen_wasm_module = module2;
  cachedInt32Memory0 = new Int32Array();
  cachedUint8Memory0 = new Uint8Array();
  return wasm;
}
async function init(input) {
  if (typeof input === "undefined") {
    input = new URL("obsidian_rust_plugin_bg.wasm", import_meta.url);
  }
  const imports = getImports();
  if (typeof input === "string" || typeof Request === "function" && input instanceof Request || typeof URL === "function" && input instanceof URL) {
    input = fetch(input);
  }
  initMemory(imports);
  const { instance, module: module2 } = await load(await input, imports);
  return finalizeInit(instance, module2);
}
var obsidian_rust_plugin_default = init;

// wasm-binary:/home/gerrie/Media/Workspace/source-scanner/pkg/obsidian_rust_plugin_bg.wasm
var obsidian_rust_plugin_bg_default = __toBinary("");

// main.ts
var DEFAULT_SETTINGS = {
  documentPath: "UNKNOWN",
  applicationExtension: ".java",
  unitTestPath: "UNKNOWN",
  sleepLength: 0,
  applicationPath: "UNKNOWN",
  groupBySize: 0
};
var SourceScanner = class extends import_obsidian2.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.intervalHandle = void 0;
    this.scanSource = new ScanSource();
    this.app = app;
    this.utils = new Utils(app);
  }
  async onload() {
    await this.loadSettings();
    var sbItem = this.addStatusBarItem();
    sbItem.setText("Comment scanner OFF");
    const ribbonIconEl = this.addRibbonIcon("view", "Comment Scanner TS", (evt) => {
      if (this.intervalHandle == void 0) {
        sbItem.setText("Comment scanner ON");
        this.intervalHandle = this.scanSource.init(this.app, this, scan_for_comments);
      } else {
        sbItem.setText("Comment scanner OFF");
        clearInterval(this.intervalHandle);
        this.intervalHandle = void 0;
      }
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "source-scanner-solution-files",
      name: "Create solution files",
      callback: () => {
        if (this.settings.documentPath == "UNKNOWN") {
          const notice = new import_obsidian2.Notice("Please configure solution scanner portion before using it.", 0);
        } else {
          const docFolders = this.utils.createFolders(this.settings.documentPath);
          const crossCuttingConcerns = new CrossCuttingConcerns(this.app, docFolders);
          crossCuttingConcerns.generateCrossCuttingConcerns();
        }
      }
    });
    this.addCommand({
      id: "source-scanner-marker-table",
      name: "Create marker table",
      callback: () => {
        const docFolders = this.utils.createFolders(this.settings.documentPath);
        const markerGroupList = new MarkerGroupList(this.app, docFolders);
        markerGroupList.generateMakerGroupList();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new ScannerSettingsTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
    await obsidian_rust_plugin_default(Promise.resolve(obsidian_rust_plugin_bg_default));
  }
  onunload() {
    if (this.intervalHandle != void 0) {
      clearInterval(this.intervalHandle);
      this.intervalHandle = void 0;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian2.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
