/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __toBinary = /* @__PURE__ */ (() => {
  var table = new Uint8Array(128);
  for (var i = 0; i < 64; i++)
    table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    var n = base64.length, bytes = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
    for (var i2 = 0, j = 0; i2 < n; ) {
      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SourceScanner
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// ts/ScannerSettingsTab.ts
var import_obsidian = require("obsidian");
var electron = require("electron").remote;
var dialog = electron.dialog;
var ScannerSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    if (this.plugin.intervalHandle) {
      new import_obsidian.Setting(containerEl).setName("Scanner is running").setDesc("Please shutdown the scanner before updating the settings");
    } else {
      var appPathSetting = new import_obsidian.Setting(containerEl);
      appPathSetting.setName("Application Path").setDesc(`Application workspace: ${this.plugin.settings.applicationPath}`).addButton((button) => button.setButtonText("SELECT APPLICATION PATH").onClick((cb) => {
        dialog.showOpenDialog({ properties: ["openDirectory"] }).then(async (result) => {
          console.log(result.canceled);
          console.log(result.filePaths);
          this.plugin.settings.applicationPath = result.filePaths[0];
          appPathSetting.setDesc(`Application workspace: ${this.plugin.settings.applicationPath}`);
          await this.plugin.saveSettings();
        }).catch((err) => {
          console.log(err);
        });
      }));
      var testPathSetting = new import_obsidian.Setting(containerEl);
      testPathSetting.setName("Test Path").setDesc(`Test workspace: ${this.plugin.settings.unitTestPath}`).addButton((button) => button.setButtonText("SELECT UNIT TEST PATH").onClick((cb) => {
        dialog.showOpenDialog({ properties: ["openDirectory"] }).then(async (result) => {
          console.log(result.canceled);
          console.log(result.filePaths);
          this.plugin.settings.unitTestPath = result.filePaths[0];
          testPathSetting.setDesc(`Test workspace: ${this.plugin.settings.unitTestPath}`);
          await this.plugin.saveSettings();
        }).catch((err) => {
          console.log(err);
        });
      }));
      new import_obsidian.Setting(containerEl).setName("Documentation Path").setDesc("Path to document workspace relative from vault").addText((text) => text.setPlaceholder("Enter the documentation path").setValue(this.plugin.settings.documentPath).onChange(async (value) => {
        this.plugin.settings.documentPath = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(containerEl).setName("Application type").setDesc("Type of application").addDropdown((dropDown) => dropDown.addOption(".java", "java").addOption(".rs", "rust").addOption(".c", "c").addOption(".c++", "c++").addOption(".cpp", "cpp").addOption(".cxx", "cxx").addOption(".ts", "typescript").setValue(this.plugin.settings.applicationExtension).onChange(async (value) => {
        this.plugin.settings.applicationExtension = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(containerEl).setName("Activation interval").setDesc("Activation interval in ms").addText((text) => text.setPlaceholder("Enter the activation interval").setValue(this.plugin.settings.sleepLength.toString()).onChange(async (value) => {
        this.plugin.settings.sleepLength = parseInt(value);
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(containerEl).setName("Number of source files to process").setDesc("Number of source files to process at a time").addText((text) => text.setPlaceholder("Enter the source file processing count").setValue(this.plugin.settings.groupBySize.toString()).onChange(async (value) => {
        this.plugin.settings.groupBySize = parseInt(value);
        await this.plugin.saveSettings();
      }));
    }
  }
};

// ts/ScanSource.ts
var import_fs2 = require("fs");

// ts/Utils.ts
var import_fs = require("fs");

// ts/DocFolders.ts
var DocFolders = class {
  constructor(storyFolder, solutionFolder, markerMapping, commentMapping, testCommentMapping, settingsUnitTestMapping) {
    this.settingsStoryFolder = storyFolder;
    this.settingsSolutionFolder = solutionFolder;
    this.settingsMarkerFolder = markerMapping;
    this.settingsCommentFolder = commentMapping;
    this.settingsTestCommentFolder = testCommentMapping;
    this.settingsUnitTestFolder = settingsUnitTestMapping;
  }
};

// ts/Utils.ts
var path = require("path").remote;
var Utils = class {
  constructor(app) {
    this.separator = "/";
    this.markerRegExp = /\s\^[a-zA-Z]+[a-zA-Z0-9]+\-[0-9]+(\-[a-zA-Z]+[a-zA-Z0-9]+\-[0-9]+)*/g;
    this.app = app;
    this.fsa = this.app.vault.adapter;
  }
  toVaultTypeSeperator() {
    if (this.separator == "\\") {
      return "/";
    } else {
      return "/";
    }
  }
  walkInFolderFromDir(dir, files) {
    const fileList = (0, import_fs.readdirSync)(dir);
    for (const file of fileList) {
      var name = `${dir}${this.separator}${file}`;
      if ((0, import_fs.statSync)(name).isDirectory()) {
        this.walkInFolderFromDir(name, files);
      } else {
        files.push(name);
      }
    }
    return files;
  }
  filterFileNamesByExtension(extension, files) {
    var result = new Array();
    result = files.filter((fileName) => {
      return fileName.endsWith(extension);
    });
    return result;
  }
  listMDFilesInVault(folder) {
    const commentBasePath = `${this.fsa.getBasePath()}${this.separator}${folder}`;
    return this.filterFileNamesByExtension(".md", this.walkInFolderFromDir(commentBasePath, [])).map((value) => {
      var fileName = value.replace(`${this.fsa.getBasePath()}`, "");
      while (fileName.contains(`\\`)) {
        fileName = fileName.replace(`${this.separator}`, "/");
      }
      return fileName;
    });
  }
  makeDirInVault(filePathAndName) {
    var filePath = filePathAndName.split(this.toVaultTypeSeperator());
    filePath = filePath.slice(0, filePath.length - 1).slice(1);
    filePath[0] = `/${filePath[0]}`;
    var constructedPath = [];
    while (filePath.length > 0) {
      constructedPath.push(filePath[0]);
      this.fsa.mkdir(constructedPath.join("/"));
      filePath = filePath.slice(1);
    }
  }
  sortSetOfString(set) {
    const sortedArray = Array.from(set).sort();
    return new Set(sortedArray);
  }
  createFolders(docPath) {
    const settingsBase1 = `${this.fsa.getBasePath()}${this.separator}${docPath}${this.separator}`;
    const settingsStoryFolder1 = settingsBase1 + "stories";
    const settingsSolutionFolder1 = settingsBase1 + "solutions";
    const settingsMarkerMapping1 = settingsBase1 + "marker";
    const settingsCommentsMapping1 = settingsBase1 + "comments";
    const settingsTestCommentsMapping1 = settingsBase1 + "test comments";
    const settingsUnitTestMapping1 = settingsBase1 + "unit tests";
    (0, import_fs.mkdirSync)(settingsStoryFolder1, { recursive: true });
    (0, import_fs.mkdirSync)(settingsSolutionFolder1, { recursive: true });
    (0, import_fs.mkdirSync)(settingsMarkerMapping1, { recursive: true });
    (0, import_fs.mkdirSync)(settingsCommentsMapping1, { recursive: true });
    (0, import_fs.mkdirSync)(settingsTestCommentsMapping1, { recursive: true });
    (0, import_fs.mkdirSync)(settingsUnitTestMapping1, { recursive: true });
    const settingsBase = `${docPath}${this.separator}`;
    const settingsStoryFolder = settingsBase + "stories";
    const settingsSolutionFolder = settingsBase + "solutions";
    const settingsMarkerMapping = settingsBase + "marker";
    const settingsCommentsMapping = settingsBase + "comments";
    const settingsTestCommentsMapping = settingsBase + "test comments";
    const settingsUnitTestMapping = settingsBase + "unit tests";
    return new DocFolders(settingsStoryFolder, settingsSolutionFolder, settingsMarkerMapping, settingsCommentsMapping, settingsTestCommentsMapping, settingsUnitTestMapping);
  }
};

// ts/ScanSource.ts
var ScanSource = class {
  constructor() {
    this.phaseCount = 0;
    this.sourceAndDocumentLink = /* @__PURE__ */ new Set();
  }
  init(app, plugin, scanner) {
    this.codeScanner = scanner;
    this.applicationPath = plugin.settings.applicationPath;
    this.codeExtension = plugin.settings.applicationExtension;
    this.documentPath = plugin.settings.documentPath;
    this.testPath = plugin.settings.unitTestPath;
    this.groupBySize = plugin.settings.groupBySize;
    this.sleepLength = plugin.settings.sleepLength;
    this.utils = new Utils(app);
    this.fsa = app.vault.adapter;
    return setInterval(() => this.run(), this.sleepLength);
  }
  run() {
    this.docFolders = this.utils.createFolders(this.documentPath);
    if (this.phaseCount == 1) {
      const impFiles = this.utils.filterFileNamesByExtension(this.codeExtension, this.utils.walkInFolderFromDir(this.applicationPath, []));
      this.applicationFileListWithExtension = [];
      for (let i = 0; i < impFiles.length; i += this.groupBySize) {
        const chunk = impFiles.slice(i, i + this.groupBySize);
        this.applicationFileListWithExtension.push(chunk);
      }
      const testFiles = this.utils.filterFileNamesByExtension(this.codeExtension, this.utils.walkInFolderFromDir(this.testPath, []));
      this.testFileListWithExtension = [];
      for (let i = 0; i < testFiles.length; i += this.groupBySize) {
        const chunk = testFiles.slice(i, i + this.groupBySize);
        this.testFileListWithExtension.push(chunk);
      }
    }
    if (this.phaseCount == 2) {
      const files = this.utils.filterFileNamesByExtension(".md", this.utils.walkInFolderFromDir(this.fsa.getBasePath() + this.utils.separator + this.docFolders.settingsCommentFolder, []));
      this.documentFileListWithExtension = files.map((fileName) => {
        return fileName.replace(this.fsa.getBasePath() + this.utils.separator, "");
      });
    }
    if (this.phaseCount == 3 && this.applicationFileListWithExtension.length > 0) {
      const filesToCheck = this.applicationFileListWithExtension.pop();
      if (filesToCheck != void 0) {
        filesToCheck.forEach((srcFile) => {
          const documentName = this.createDocNameFromSourceName(srcFile, this.applicationPath);
          const documentNameAndPath = `${this.documentPath}${this.utils.separator}comments${this.utils.separator}${documentName}`;
          const docFullPathname = `${this.fsa.getBasePath()}${this.utils.separator}${documentNameAndPath}`;
          this.sourceAndDocumentLink.add(documentNameAndPath);
          this.doActualScanning(documentNameAndPath, srcFile, docFullPathname);
        });
        this.phaseCount = 2;
      }
    }
    if (this.phaseCount == 4 && this.testFileListWithExtension.length > 0) {
      const filesToCheck = this.testFileListWithExtension.pop();
      if (filesToCheck != void 0) {
        filesToCheck.forEach((srcFile) => {
          const testDocumentName = this.createDocNameFromSourceName(srcFile, this.testPath);
          const testDocumentNameAndPath = `${this.documentPath}${this.utils.separator}test comments${this.utils.separator}${testDocumentName}`;
          const docFullPathname = `${this.fsa.getBasePath()}${this.utils.separator}${testDocumentNameAndPath}`;
          this.doActualScanning(testDocumentNameAndPath, srcFile, docFullPathname);
        });
        this.phaseCount = 4;
      }
    }
    if (this.phaseCount == 5) {
      this.documentFileListWithExtension.forEach((fileName) => {
        if (!this.sourceAndDocumentLink.has(fileName)) {
          this.utils.fsa.remove(fileName);
        }
      });
      this.sourceAndDocumentLink.clear();
      this.phaseCount = -1;
    }
    this.phaseCount += 1;
  }
  doActualScanning(documentNameAndPath, srcFile, docFullPathname) {
    this.sourceAndDocumentLink.add(documentNameAndPath);
    const srcFileExists = (0, import_fs2.existsSync)(srcFile);
    if (!srcFileExists) {
      console.info("Test source file gone " + srcFile);
    } else {
      const srcStat = (0, import_fs2.statSync)(srcFile);
      var createdFile = false;
      const docFileExists = (0, import_fs2.existsSync)(docFullPathname);
      var docStat;
      var createdFile = false;
      if (docFileExists) {
        docStat = (0, import_fs2.statSync)(docFullPathname);
      } else {
        (0, import_fs2.writeFileSync)(docFullPathname, "");
        createdFile = true;
      }
      docStat = (0, import_fs2.statSync)(docFullPathname);
      if (createdFile || docStat.mtimeMs < srcStat.mtimeMs) {
        const srcLines = (0, import_fs2.readFileSync)(srcFile, { encoding: "utf8", flag: "r" });
        var allComments;
        var comments = "NONE";
        try {
          comments = this.codeScanner(srcLines);
          if (comments != void 0) {
            allComments = comments.replaceAll(/\n\s+\*/g, "\n");
          }
        } catch (exception) {
          console.log("Error in scan for file " + srcFile);
          const headerComment2 = `[Source](file://${srcFile})

---
`;
          this.fsa.write(documentNameAndPath, headerComment2 + comments);
        }
        if (allComments == "unpaired surrogates") {
          console.log("Error in scan for file " + srcFile);
        }
        const headerComment = `[Source](file://${srcFile})

---
`;
        this.fsa.write(documentNameAndPath, headerComment + allComments);
      }
    }
  }
  createDocNameFromSourceName(sourceFile, applicationPath) {
    var fileName = sourceFile.replace(applicationPath + this.utils.separator, "").replace(this.codeExtension, ".md");
    while (fileName.contains(this.utils.separator)) {
      fileName = fileName.replace(this.utils.separator, ".");
    }
    return fileName;
  }
  createRelativePath(sourceFile, documentPart) {
    var sourceFileParts = sourceFile.split(this.utils.separator);
    var documentAndPathParts = `${this.utils.fsa.getBasePath()}/${documentPart}`.split("/");
    while (sourceFileParts[0] == documentAndPathParts[0]) {
      sourceFileParts = sourceFileParts.slice(1);
      documentAndPathParts = documentAndPathParts.slice(1);
    }
    return documentAndPathParts.filter((value) => {
      return !value.endsWith(".md");
    }).map((value) => "..").concat(sourceFileParts).join("/");
  }
};

// ts/CrossCuttingConcerns.ts
var CrossCuttingConcerns = class {
  constructor(app, docFolders) {
    this.utils = new Utils(app);
    this.fsa = this.utils.fsa;
    this.docFolders = docFolders;
  }
  generateCrossCuttingConcerns() {
    const documentToMarkerMap = /* @__PURE__ */ new Map();
    const testDocumentToMarkerMap = /* @__PURE__ */ new Map();
    const storyToMarkerMap = /* @__PURE__ */ new Map();
    const testStoryToMarkerMap = /* @__PURE__ */ new Map();
    const markerToStoryMap = /* @__PURE__ */ new Map();
    const markerToTestStoryMap = /* @__PURE__ */ new Map();
    const markerToDocumentMap = /* @__PURE__ */ new Map();
    const markerToTestDocumentMap = /* @__PURE__ */ new Map();
    const promise = new Array();
    const solutionFileToDelete = this.utils.listMDFilesInVault(this.docFolders.settingsSolutionFolder);
    solutionFileToDelete.forEach((file) => {
      promise.push(this.fsa.remove(file));
    });
    Promise.allSettled(promise).then((value) => {
      this.fsa.rmdir(this.docFolders.settingsSolutionFolder, true);
      this.fsa.mkdir(this.docFolders.settingsSolutionFolder);
      const commentMDFiles = this.utils.listMDFilesInVault(this.docFolders.settingsCommentFolder);
      const testCommentMDFiles = this.utils.listMDFilesInVault(this.docFolders.settingsTestCommentFolder);
      const storyMDFiles = this.utils.listMDFilesInVault(this.docFolders.settingsStoryFolder);
      const testStoryMDFiles = this.utils.listMDFilesInVault(this.docFolders.settingsUnitTestFolder);
      const allPromises = new Array();
      commentMDFiles.forEach((commentFile) => {
        allPromises.push(this.fsa.read(commentFile).then((value2) => {
          var markerSet = /* @__PURE__ */ new Set();
          const markersMatch = value2.matchAll(this.utils.markerRegExp);
          Array.from(markersMatch).forEach((marker) => {
            markerSet.add(marker[0].trim());
          });
          markerSet = this.utils.sortSetOfString(markerSet);
          const documentName = commentFile.split("/").last();
          markerSet.forEach((marker) => {
            markerToDocumentMap.set(marker.trim(), documentName);
          });
          if (documentName != void 0) {
            documentToMarkerMap.set(documentName, markerSet);
          }
        }));
      });
      testCommentMDFiles.forEach((commentFile) => {
        allPromises.push(this.fsa.read(commentFile).then((value2) => {
          var markerSet = /* @__PURE__ */ new Set();
          const markersMatch = value2.matchAll(this.utils.markerRegExp);
          Array.from(markersMatch).forEach((marker) => {
            markerSet.add(marker[0].trim());
          });
          markerSet = this.utils.sortSetOfString(markerSet);
          const documentName = commentFile.split("/").last();
          markerSet.forEach((marker) => {
            markerToTestDocumentMap.set(marker.trim(), documentName);
          });
          if (documentName != void 0) {
            testDocumentToMarkerMap.set(documentName, markerSet);
          }
        }));
      });
      storyMDFiles.forEach((storyFile) => {
        allPromises.push(this.fsa.read(storyFile).then((value2) => {
          var markerSet = /* @__PURE__ */ new Set();
          const markersMatch = value2.matchAll(this.utils.markerRegExp);
          Array.from(markersMatch).forEach((marker) => {
            markerSet.add(marker[0].trim());
          });
          markerSet = this.utils.sortSetOfString(markerSet);
          const documentName = storyFile.split("/").last();
          markerSet.forEach((marker) => {
            markerToStoryMap.set(marker.trim(), storyFile);
          });
          if (documentName != void 0) {
            storyToMarkerMap.set(documentName, markerSet);
          }
        }));
      });
      testStoryMDFiles.forEach((storyFile) => {
        allPromises.push(this.fsa.read(storyFile).then((value2) => {
          var markerSet = /* @__PURE__ */ new Set();
          const markersMatch = value2.matchAll(this.utils.markerRegExp);
          Array.from(markersMatch).forEach((marker) => {
            markerSet.add(marker[0].trim());
          });
          markerSet = this.utils.sortSetOfString(markerSet);
          const documentName = storyFile.split("/").last();
          markerSet.forEach((marker) => {
            markerToTestStoryMap.set(this.dropRightAndMkString(marker.trim().split("-"), 4, "-"), storyFile);
          });
          if (documentName != void 0) {
            testStoryToMarkerMap.set(documentName, markerSet);
          }
        }));
      });
      Promise.allSettled(allPromises).then((value2) => {
        var listOfMarkers = [];
        var unitTestMarkers = [];
        Array.from(documentToMarkerMap.values()).forEach((setOfMarkers) => {
          const loalListOfMarkers = Array.from(setOfMarkers);
          listOfMarkers = listOfMarkers.concat(loalListOfMarkers);
        });
        Array.from(testDocumentToMarkerMap.values()).forEach((setOfMarkers) => {
          const loalListOfMarkers = Array.from(setOfMarkers);
          unitTestMarkers = unitTestMarkers.concat(loalListOfMarkers);
        });
        listOfMarkers.sort((a, b) => a.localeCompare(b));
        unitTestMarkers.sort((a, b) => a.localeCompare(b));
        var allMarkers = this.groupedMap(listOfMarkers, (i) => this.solutionDocNameFromMarker(i));
        var allUnitTestMarkers = this.groupedUnitTestMap(unitTestMarkers);
        Array.from(allMarkers).forEach(([solName, markers]) => {
          var mdString = `# ${this.dropRightAndMkString(solName.split("/"), 1, " ").toUpperCase()}
`;
          var markerToStory = new Map(Array.from(markerToStoryMap.entries()).filter(([key]) => {
            const splitMarker = key.split("-");
            return markers[0].startsWith(this.dropRightAndMkString(splitMarker, 1, "-"));
          }));
          mdString = mdString + "## Functional Requirement\n";
          markerToStory.forEach((story, marker) => {
            if (markerToStoryMap.get(marker) != void 0) {
              mdString = mdString + `![[${markerToStoryMap.get(marker)}#${marker.trim()}]]
`;
            }
          });
          const uniqueMakers = Array.from(new Set(markers));
          uniqueMakers.forEach((marker, story) => {
            mdString = mdString + "## Implimentation Solution\n";
            if (markerToDocumentMap.get(marker) != void 0) {
              const document2 = markerToDocumentMap.get(marker);
              mdString = mdString + `![[${document2}#${marker.trim()}]]
`;
              if (allUnitTestMarkers.get(marker) != void 0) {
                mdString = mdString + "### Unit Test Implementation\n";
                allUnitTestMarkers.get(marker).forEach((marker2) => {
                  if (this.isTestMarker(marker2)) {
                    mdString = mdString + `![[${markerToTestDocumentMap.get(marker2)}#${marker2.trim()}]]
`;
                  }
                });
              }
            }
          });
          this.utils.makeDirInVault(solName);
          this.fsa.write(solName, mdString);
        });
      });
    });
  }
  dropRightAndMkString(values, n, delimiter) {
    return values.slice(0, values.length - n).join(delimiter);
  }
  dropLeftAndMkString(values, n, delimiter) {
    return values.slice(n, values.length - n).join(delimiter);
  }
  getSolutionFileName(solName) {
    const fileNameParts = solName.split("-");
    var fileName = [];
    var i = 0;
    for (i = 0; i < fileNameParts.length; i++) {
      if (i % 2 == 0) {
        if (i == fileNameParts.length - 2) {
          fileName.push(fileNameParts[i]);
        } else {
          fileName.push(fileNameParts[i] + "-" + fileNameParts[i + 1]);
        }
      }
    }
    return `/${fileName.join("/")}`;
  }
  solutionDocNameFromMarker(marker) {
    const docName = this.getSolutionFileName(marker.replace("^", ""));
    const solutionName = `${docName}.md`;
    return `/${this.docFolders.settingsSolutionFolder}${solutionName}`;
  }
  groupedMap(array, getKey) {
    return array.reduce((map, currentValue) => {
      const key = getKey(currentValue);
      if (!map.has(key)) {
        map.set(key, []);
      }
      if (map.get(key) != void 0) {
        map?.get(key)?.push(currentValue);
      }
      return map;
    }, /* @__PURE__ */ new Map());
  }
  groupedUnitTestMap(array) {
    return array.reduce((map, currentValue) => {
      const key = currentValue.split("-");
      const keyValue = this.dropRightAndMkString(key, 2, "-");
      if (!map.has(keyValue)) {
        map.set(keyValue, []);
      }
      if (map.get(keyValue) != void 0) {
        map?.get(keyValue)?.push(currentValue);
      }
      return map;
    }, /* @__PURE__ */ new Map());
  }
  isTestMarker(marker) {
    return marker.split("-").length == 8;
  }
};

// ts/MarkerGroupList.ts
var MarkerGroupList = class {
  constructor(app, docFolders) {
    this.markerFileWithPath = `${docFolders.settingsMarkerFolder}/marker-table.md`;
    this.utils = new Utils(app);
    this.docFolders = docFolders;
  }
  generateMakerGroupList() {
    const markerToDocumentMap = /* @__PURE__ */ new Map();
    const markerToTestDocumentMap = /* @__PURE__ */ new Map();
    const commentFiles = this.utils.listMDFilesInVault(this.docFolders.settingsCommentFolder);
    const testCommentFiles = this.utils.listMDFilesInVault(this.docFolders.settingsTestCommentFolder);
    const promise = new Array();
    commentFiles.forEach((commentFile) => {
      promise.push(this.utils.fsa.read(commentFile).then((value) => {
        var markerSet = /* @__PURE__ */ new Set();
        const markersMatch = value.matchAll(this.utils.markerRegExp);
        Array.from(markersMatch).forEach((marker) => {
          markerSet.add(marker[0].trim());
        });
        markerSet = this.utils.sortSetOfString(markerSet);
        markerSet.forEach((marker) => {
          if (!markerToDocumentMap.has(marker.trim())) {
            markerToDocumentMap.set(marker, /* @__PURE__ */ new Set());
          }
          markerToDocumentMap.get(marker.trim())?.add(commentFile);
        });
      }));
    });
    testCommentFiles.forEach((commentFile) => {
      promise.push(this.utils.fsa.read(commentFile).then((value) => {
        var markerSet = /* @__PURE__ */ new Set();
        const markersMatch = value.matchAll(this.utils.markerRegExp);
        Array.from(markersMatch).forEach((marker) => {
          markerSet.add(marker[0].trim());
        });
        markerSet = this.utils.sortSetOfString(markerSet);
        markerSet.forEach((marker) => {
          if (!markerToTestDocumentMap.has(marker.trim())) {
            markerToTestDocumentMap.set(marker, /* @__PURE__ */ new Set());
          }
          markerToTestDocumentMap.get(marker.trim())?.add(commentFile);
        });
      }));
    });
    Promise.allSettled(promise).then((value) => {
      const allMarkers = Array.from(markerToDocumentMap.keys()).sort();
      var mdString = "Code and Code Story links\n\n";
      mdString = mdString + `|marker|document|
`;
      mdString = mdString + `|------|--------|
`;
      allMarkers.forEach((marker) => {
        const docNameSet = markerToDocumentMap.get(marker);
        docNameSet?.forEach((docName) => {
          mdString = mdString + `|${marker.substring(1)}|[[${docName}#${marker}]]
`;
        });
      });
      const allTestMarkers = Array.from(markerToTestDocumentMap.keys()).sort();
      mdString = mdString + "\nTest and Test Story links\n\n";
      mdString = mdString + `|marker|document|
`;
      mdString = mdString + `|------|--------|
`;
      allTestMarkers.forEach((marker) => {
        const docNameSet = markerToTestDocumentMap.get(marker);
        docNameSet?.forEach((docName) => {
          mdString = mdString + `|${marker.substring(1)}|[[${docName}#${marker}]]
`;
        });
      });
      this.utils.fsa.write(this.markerFileWithPath, mdString);
    });
  }
};

// pkg/obsidian_rust_plugin.js
var import_meta = {};
var wasm;
var heap = new Array(128).fill(void 0);
heap.push(void 0, null, true, false);
function getObject(idx) {
  return heap[idx];
}
var WASM_VECTOR_LEN = 0;
var cachedUint8Memory0 = null;
function getUint8Memory0() {
  if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {
    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
  }
  return cachedUint8Memory0;
}
var cachedTextEncoder = typeof TextEncoder !== "undefined" ? new TextEncoder("utf-8") : { encode: () => {
  throw Error("TextEncoder not available");
} };
var encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg, view) {
  return cachedTextEncoder.encodeInto(arg, view);
} : function(arg, view) {
  const buf = cachedTextEncoder.encode(arg);
  view.set(buf);
  return {
    read: arg.length,
    written: buf.length
  };
};
function passStringToWasm0(arg, malloc, realloc) {
  if (realloc === void 0) {
    const buf = cachedTextEncoder.encode(arg);
    const ptr2 = malloc(buf.length, 1) >>> 0;
    getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);
    WASM_VECTOR_LEN = buf.length;
    return ptr2;
  }
  let len = arg.length;
  let ptr = malloc(len, 1) >>> 0;
  const mem = getUint8Memory0();
  let offset = 0;
  for (; offset < len; offset++) {
    const code = arg.charCodeAt(offset);
    if (code > 127)
      break;
    mem[ptr + offset] = code;
  }
  if (offset !== len) {
    if (offset !== 0) {
      arg = arg.slice(offset);
    }
    ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
    const ret = encodeString(arg, view);
    offset += ret.written;
    ptr = realloc(ptr, len, offset, 1) >>> 0;
  }
  WASM_VECTOR_LEN = offset;
  return ptr;
}
function isLikeNone(x) {
  return x === void 0 || x === null;
}
var cachedInt32Memory0 = null;
function getInt32Memory0() {
  if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {
    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
  }
  return cachedInt32Memory0;
}
var heap_next = heap.length;
function dropObject(idx) {
  if (idx < 132)
    return;
  heap[idx] = heap_next;
  heap_next = idx;
}
function takeObject(idx) {
  const ret = getObject(idx);
  dropObject(idx);
  return ret;
}
var cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : { decode: () => {
  throw Error("TextDecoder not available");
} };
if (typeof TextDecoder !== "undefined") {
  cachedTextDecoder.decode();
}
function getStringFromWasm0(ptr, len) {
  ptr = ptr >>> 0;
  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
function addHeapObject(obj) {
  if (heap_next === heap.length)
    heap.push(heap.length + 1);
  const idx = heap_next;
  heap_next = heap[idx];
  heap[idx] = obj;
  return idx;
}
function scan_for_comments(str) {
  const ret = wasm.scan_for_comments(addHeapObject(str));
  return takeObject(ret);
}
async function __wbg_load(module2, imports) {
  if (typeof Response === "function" && module2 instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming === "function") {
      try {
        return await WebAssembly.instantiateStreaming(module2, imports);
      } catch (e) {
        if (module2.headers.get("Content-Type") != "application/wasm") {
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
        } else {
          throw e;
        }
      }
    }
    const bytes = await module2.arrayBuffer();
    return await WebAssembly.instantiate(bytes, imports);
  } else {
    const instance = await WebAssembly.instantiate(module2, imports);
    if (instance instanceof WebAssembly.Instance) {
      return { instance, module: module2 };
    } else {
      return instance;
    }
  }
}
function __wbg_get_imports() {
  const imports = {};
  imports.wbg = {};
  imports.wbg.__wbindgen_string_get = function(arg0, arg1) {
    const obj = getObject(arg1);
    const ret = typeof obj === "string" ? obj : void 0;
    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len1;
    getInt32Memory0()[arg0 / 4 + 0] = ptr1;
  };
  imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
    takeObject(arg0);
  };
  imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
    const ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
  };
  imports.wbg.__wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
  };
  return imports;
}
function __wbg_init_memory(imports, maybe_memory) {
}
function __wbg_finalize_init(instance, module2) {
  wasm = instance.exports;
  __wbg_init.__wbindgen_wasm_module = module2;
  cachedInt32Memory0 = null;
  cachedUint8Memory0 = null;
  return wasm;
}
async function __wbg_init(input) {
  if (wasm !== void 0)
    return wasm;
  if (typeof input === "undefined") {
    input = new URL("obsidian_rust_plugin_bg.wasm", import_meta.url);
  }
  const imports = __wbg_get_imports();
  if (typeof input === "string" || typeof Request === "function" && input instanceof Request || typeof URL === "function" && input instanceof URL) {
    input = fetch(input);
  }
  __wbg_init_memory(imports);
  const { instance, module: module2 } = await __wbg_load(await input, imports);
  return __wbg_finalize_init(instance, module2);
}
var obsidian_rust_plugin_default = __wbg_init;

// wasm-binary:/home/gerrie/Media/Workspace/source-scanner/pkg/obsidian_rust_plugin_bg.wasm
var obsidian_rust_plugin_bg_default = __toBinary("");

// main.ts
var DEFAULT_SETTINGS = {
  documentPath: "UNKNOWN",
  applicationExtension: ".java",
  unitTestPath: "UNKNOWN",
  sleepLength: 0,
  applicationPath: "UNKNOWN",
  groupBySize: 0
};
var SourceScanner = class extends import_obsidian2.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.intervalHandle = void 0;
    this.scanSource = new ScanSource();
    this.app = app;
    this.utils = new Utils(app);
  }
  async onload() {
    await this.loadSettings();
    var sbItem = this.addStatusBarItem();
    sbItem.setText("Comment scanner OFF");
    const ribbonIconEl = this.addRibbonIcon("view", "Comment Scanner TS", (evt) => {
      if (this.intervalHandle == void 0) {
        sbItem.setText("Comment scanner ON");
        this.intervalHandle = this.scanSource.init(this.app, this, scan_for_comments);
      } else {
        sbItem.setText("Comment scanner OFF");
        clearInterval(this.intervalHandle);
        this.intervalHandle = void 0;
      }
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "source-scanner-solution-files",
      name: "Create solution files",
      callback: () => {
        if (this.settings.documentPath == "UNKNOWN") {
          const notice = new import_obsidian2.Notice("Please configure solution scanner portion before using it.", 0);
        } else {
          const docFolders = this.utils.createFolders(this.settings.documentPath);
          const crossCuttingConcerns = new CrossCuttingConcerns(this.app, docFolders);
          crossCuttingConcerns.generateCrossCuttingConcerns();
        }
      }
    });
    this.addCommand({
      id: "source-scanner-marker-table",
      name: "Create marker table",
      callback: () => {
        const docFolders = this.utils.createFolders(this.settings.documentPath);
        const markerGroupList = new MarkerGroupList(this.app, docFolders);
        markerGroupList.generateMakerGroupList();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new ScannerSettingsTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
    await obsidian_rust_plugin_default(Promise.resolve(obsidian_rust_plugin_bg_default));
  }
  onunload() {
    if (this.intervalHandle != void 0) {
      clearInterval(this.intervalHandle);
      this.intervalHandle = void 0;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian2.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJ0cy9TY2FubmVyU2V0dGluZ3NUYWIudHMiLCAidHMvU2NhblNvdXJjZS50cyIsICJ0cy9VdGlscy50cyIsICJ0cy9Eb2NGb2xkZXJzLnRzIiwgInRzL0Nyb3NzQ3V0dGluZ0NvbmNlcm5zLnRzIiwgInRzL01hcmtlckdyb3VwTGlzdC50cyIsICJwa2cvb2JzaWRpYW5fcnVzdF9wbHVnaW4uanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwcCwgRWRpdG9yLCBNYXJrZG93blZpZXcsIE1vZGFsLCBQbHVnaW5NYW5pZmVzdCwgUGx1Z2luLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBTY2FubmVyU2V0dGluZ3NUYWIgfSBmcm9tIFwiLi90cy9TY2FubmVyU2V0dGluZ3NUYWJcIjtcbmltcG9ydCB7IFNjYW5Tb3VyY2UgfSBmcm9tICcuL3RzL1NjYW5Tb3VyY2UnXG5pbXBvcnQgeyBDcm9zc0N1dHRpbmdDb25jZXJucyB9IGZyb20gJy4vdHMvQ3Jvc3NDdXR0aW5nQ29uY2VybnMnO1xuaW1wb3J0IHsgTWFya2VyR3JvdXBMaXN0IH0gZnJvbSAnLi90cy9NYXJrZXJHcm91cExpc3QnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuL3RzL1V0aWxzJ1xuXG5pbXBvcnQgKiBhcyBsZXhlcl9wbHVnaW4gZnJvbSBcIi4vcGtnL29ic2lkaWFuX3J1c3RfcGx1Z2luLmpzXCI7XG5pbXBvcnQgKiBhcyBsZXhlcl93YXNtIGZyb20gJy4vcGtnL29ic2lkaWFuX3J1c3RfcGx1Z2luX2JnLndhc20nO1xuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcydcblxuaW50ZXJmYWNlIE15UGx1Z2luU2V0dGluZ3Mge1xuXHRkb2N1bWVudFBhdGg6IHN0cmluZztcblx0YXBwbGljYXRpb25FeHRlbnNpb246IHN0cmluZztcblx0c2xlZXBMZW5ndGg6IG51bWJlcjtcblx0YXBwbGljYXRpb25QYXRoOiBzdHJpbmc7XG5cdHVuaXRUZXN0UGF0aDogc3RyaW5nO1xuXHRncm91cEJ5U2l6ZTogbnVtYmVyO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBNeVBsdWdpblNldHRpbmdzID0ge1xuXHRkb2N1bWVudFBhdGg6ICdVTktOT1dOJyxcblx0YXBwbGljYXRpb25FeHRlbnNpb246ICcuamF2YScsXG5cdHVuaXRUZXN0UGF0aDogXCJVTktOT1dOXCIsXG5cdHNsZWVwTGVuZ3RoOiAwLjAsXG5cdGFwcGxpY2F0aW9uUGF0aDogJ1VOS05PV04nLFxuXHRncm91cEJ5U2l6ZTogMC4wLFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTb3VyY2VTY2FubmVyIGV4dGVuZHMgUGx1Z2luIHtcblx0YXBwOiBBcHA7XG5cdHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzO1xuXHRpbnRlcnZhbEhhbmRsZTogYW55ID0gdW5kZWZpbmVkO1xuXHRzY2FuU291cmNlID0gbmV3IFNjYW5Tb3VyY2UoKTtcblx0dXRpbHM6IFV0aWxzO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBtYW5pZmVzdDogUGx1Z2luTWFuaWZlc3QpIHtcblx0XHRzdXBlcihhcHAsIG1hbmlmZXN0KTtcblx0XHR0aGlzLmFwcCA9IGFwcDtcblx0XHR0aGlzLnV0aWxzID0gbmV3IFV0aWxzKGFwcCk7XG5cdH1cblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0dmFyIHNiSXRlbSA9IHRoaXMuYWRkU3RhdHVzQmFySXRlbSgpXG5cdFx0c2JJdGVtLnNldFRleHQoXCJDb21tZW50IHNjYW5uZXIgT0ZGXCIpXG5cblx0XHQvLyBUaGlzIGNyZWF0ZXMgYW4gaWNvbiBpbiB0aGUgbGVmdCByaWJib24uXG5cdFx0Y29uc3QgcmliYm9uSWNvbkVsID0gdGhpcy5hZGRSaWJib25JY29uKFxuXHRcdFx0J3ZpZXcnLFxuXHRcdFx0J0NvbW1lbnQgU2Nhbm5lciBUUycsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdFx0Ly8gQ2FsbGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBpY29uLlxuXHRcdFx0XHRpZiAodGhpcy5pbnRlcnZhbEhhbmRsZSA9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRzYkl0ZW0uc2V0VGV4dCgnQ29tbWVudCBzY2FubmVyIE9OJylcblx0XHRcdFx0XHR0aGlzLmludGVydmFsSGFuZGxlID0gdGhpcy5zY2FuU291cmNlLmluaXQodGhpcy5hcHAsIHRoaXMsIGxleGVyX3BsdWdpbi5zY2FuX2Zvcl9jb21tZW50cyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2JJdGVtLnNldFRleHQoJ0NvbW1lbnQgc2Nhbm5lciBPRkYnKVxuXHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbEhhbmRsZSk7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcnZhbEhhbmRsZSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0Ly8gUGVyZm9ybSBhZGRpdGlvbmFsIHRoaW5ncyB3aXRoIHRoZSByaWJib25cblx0XHRyaWJib25JY29uRWwuYWRkQ2xhc3MoJ215LXBsdWdpbi1yaWJib24tY2xhc3MnKTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHN0YXR1cyBiYXIgaXRlbSB0byB0aGUgYm90dG9tIG9mIHRoZSBhcHAuIERvZXMgbm90IHdvcmsgb24gbW9iaWxlIGFwcHMuXG5cdFx0Y29uc3Qgc3RhdHVzQmFySXRlbUVsID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XG5cdFx0c3RhdHVzQmFySXRlbUVsLnNldFRleHQoJ1N0YXR1cyBCYXIgVGV4dCcpO1xuXG5cdFx0Ly8gXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnc291cmNlLXNjYW5uZXItc29sdXRpb24tZmlsZXMnLFxuXHRcdFx0bmFtZTogJ0NyZWF0ZSBzb2x1dGlvbiBmaWxlcycsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5kb2N1bWVudFBhdGggPT0gJ1VOS05PV04nKSB7XG5cdFx0XHRcdFx0Y29uc3Qgbm90aWNlID0gbmV3IE5vdGljZSgnUGxlYXNlIGNvbmZpZ3VyZSBzb2x1dGlvbiBzY2FubmVyIHBvcnRpb24gYmVmb3JlIHVzaW5nIGl0LicsIDAuMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgZG9jRm9sZGVycyA9IHRoaXMudXRpbHMuY3JlYXRlRm9sZGVycyh0aGlzLnNldHRpbmdzLmRvY3VtZW50UGF0aCk7XG5cdFx0XHRcdFx0Y29uc3QgY3Jvc3NDdXR0aW5nQ29uY2VybnMgPSBuZXcgQ3Jvc3NDdXR0aW5nQ29uY2VybnModGhpcy5hcHAsIGRvY0ZvbGRlcnMpO1xuXHRcdFx0XHRcdGNyb3NzQ3V0dGluZ0NvbmNlcm5zLmdlbmVyYXRlQ3Jvc3NDdXR0aW5nQ29uY2VybnMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnc291cmNlLXNjYW5uZXItbWFya2VyLXRhYmxlJyxcblx0XHRcdG5hbWU6ICdDcmVhdGUgbWFya2VyIHRhYmxlJyxcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGRvY0ZvbGRlcnMgPSB0aGlzLnV0aWxzLmNyZWF0ZUZvbGRlcnModGhpcy5zZXR0aW5ncy5kb2N1bWVudFBhdGgpO1xuXHRcdFx0XHRjb25zdCBtYXJrZXJHcm91cExpc3QgPSBuZXcgTWFya2VyR3JvdXBMaXN0KHRoaXMuYXBwLCBkb2NGb2xkZXJzKTtcblx0XHRcdFx0bWFya2VyR3JvdXBMaXN0LmdlbmVyYXRlTWFrZXJHcm91cExpc3QoKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhbiBlZGl0b3IgY29tbWFuZCB0aGF0IGNhbiBwZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG9uIHRoZSBjdXJyZW50IGVkaXRvciBpbnN0YW5jZVxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ3NhbXBsZS1lZGl0b3ItY29tbWFuZCcsXG5cdFx0XHRuYW1lOiAnU2FtcGxlIGVkaXRvciBjb21tYW5kJyxcblx0XHRcdGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlZGl0b3IuZ2V0U2VsZWN0aW9uKCkpO1xuXHRcdFx0XHRlZGl0b3IucmVwbGFjZVNlbGVjdGlvbignU2FtcGxlIEVkaXRvciBDb21tYW5kJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblxuXHRcdC8vIFRoaXMgYWRkcyBhIGNvbXBsZXggY29tbWFuZCB0aGF0IGNhbiBjaGVjayB3aGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBhcHAgYWxsb3dzIGV4ZWN1dGlvbiBvZiB0aGUgY29tbWFuZFxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ29wZW4tc2FtcGxlLW1vZGFsLWNvbXBsZXgnLFxuXHRcdFx0bmFtZTogJ09wZW4gc2FtcGxlIG1vZGFsIChjb21wbGV4KScsXG5cdFx0XHRjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcblx0XHRcdFx0Ly8gQ29uZGl0aW9ucyB0byBjaGVja1xuXHRcdFx0XHRjb25zdCBtYXJrZG93blZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdFx0XHRpZiAobWFya2Rvd25WaWV3KSB7XG5cdFx0XHRcdFx0Ly8gSWYgY2hlY2tpbmcgaXMgdHJ1ZSwgd2UncmUgc2ltcGx5IFwiY2hlY2tpbmdcIiBpZiB0aGUgY29tbWFuZCBjYW4gYmUgcnVuLlxuXHRcdFx0XHRcdC8vIElmIGNoZWNraW5nIGlzIGZhbHNlLCB0aGVuIHdlIHdhbnQgdG8gYWN0dWFsbHkgcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuXHRcdFx0XHRcdGlmICghY2hlY2tpbmcpIHtcblx0XHRcdFx0XHRcdG5ldyBTYW1wbGVNb2RhbCh0aGlzLmFwcCkub3BlbigpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFRoaXMgY29tbWFuZCB3aWxsIG9ubHkgc2hvdyB1cCBpbiBDb21tYW5kIFBhbGV0dGUgd2hlbiB0aGUgY2hlY2sgZnVuY3Rpb24gcmV0dXJucyB0cnVlXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTY2FubmVyU2V0dGluZ3NUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuXHRcdC8vIElmIHRoZSBwbHVnaW4gaG9va3MgdXAgYW55IGdsb2JhbCBET00gZXZlbnRzIChvbiBwYXJ0cyBvZiB0aGUgYXBwIHRoYXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyBwbHVnaW4pXG5cdFx0Ly8gVXNpbmcgdGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciB3aGVuIHRoaXMgcGx1Z2luIGlzIGRpc2FibGVkLlxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0Y29uc29sZS5sb2coJ2NsaWNrJywgZXZ0KTtcblx0XHR9KTtcblxuXHRcdC8vIFdoZW4gcmVnaXN0ZXJpbmcgaW50ZXJ2YWxzLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYXV0b21hdGljYWxseSBjbGVhciB0aGUgaW50ZXJ2YWwgd2hlbiB0aGUgcGx1Z2luIGlzIGRpc2FibGVkLlxuXHRcdHRoaXMucmVnaXN0ZXJJbnRlcnZhbCh3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4gY29uc29sZS5sb2coJ3NldEludGVydmFsJyksIDUgKiA2MCAqIDEwMDApKTtcblx0XHRcblx0XHRhd2FpdCBsZXhlcl9wbHVnaW4uZGVmYXVsdChQcm9taXNlLnJlc29sdmUobGV4ZXJfd2FzbS5kZWZhdWx0KSk7XG5cblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXHRcdGlmICh0aGlzLmludGVydmFsSGFuZGxlICE9IHVuZGVmaW5lZCkge1xuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSGFuZGxlKTtcblx0XHRcdHRoaXMuaW50ZXJ2YWxIYW5kbGUgPSB1bmRlZmluZWQ7XG5cdCAgICB9XG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fSBcbn1cblxuY2xhc3MgU2FtcGxlTW9kYWwgZXh0ZW5kcyBNb2RhbCB7IFxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xuXHRcdHN1cGVyKGFwcCk7XG5cdH1cblxuXHRvbk9wZW4oKSB7XG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cdFx0Y29udGVudEVsLnNldFRleHQoJ1dvYWghJyk7XG5cdH1cblxuXHRvbkNsb3NlKCkge1xuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xuXHR9XG59XG5cbiIsICJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBTb3VyY2VTY2FubmVyIGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuL1V0aWxzXCI7XG5jb25zdCBlbGVjdHJvbiA9IHJlcXVpcmUoJ2VsZWN0cm9uJykucmVtb3RlIFxuY29uc3QgZGlhbG9nID0gZWxlY3Ryb24uZGlhbG9nXG5cbmV4cG9ydCBjbGFzcyBTY2FubmVyU2V0dGluZ3NUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBTb3VyY2VTY2FubmVyO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFNvdXJjZVNjYW5uZXIpIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHtjb250YWluZXJFbH0gPSB0aGlzO1xuXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy9idXMgTWFrZSBzdXJlIHRoYXQgdGhlIHNjYW5uZXIgaXMgc3dpdGNoZWQgb2ZmIGJlZm9yZSBhbGxvd2luZyBcbiAgICAgICAgLy9idXMgdXNlciB0byB1cGRhdGUgdGhlIHNldHRpbmdzLiBec2V0dGluZ3MtMDFcbiAgICAgICAgLy9cbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLmludGVydmFsSGFuZGxlKSB7XG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIlNjYW5uZXIgaXMgcnVubmluZ1wiKVxuICAgICAgICAgICAgICAgIC5zZXREZXNjKFwiUGxlYXNlIHNodXRkb3duIHRoZSBzY2FubmVyIGJlZm9yZSB1cGRhdGluZyB0aGUgc2V0dGluZ3NcIik7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHZhciBhcHBQYXRoU2V0dGluZyA9IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKTtcblxuICAgICAgICAgICAgYXBwUGF0aFNldHRpbmdcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIkFwcGxpY2F0aW9uIFBhdGhcIilcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhgQXBwbGljYXRpb24gd29ya3NwYWNlOiAke3RoaXMucGx1Z2luLnNldHRpbmdzLmFwcGxpY2F0aW9uUGF0aH1gKVxuICAgICAgICAgICAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoXCJTRUxFQ1QgQVBQTElDQVRJT04gUEFUSFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKGNiIDogTW91c2VFdmVudCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZy5zaG93T3BlbkRpYWxvZyh7cHJvcGVydGllczogWydvcGVuRGlyZWN0b3J5J10gfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgKHJlc3VsdDogeyBjYW5jZWxlZDogYW55OyBmaWxlUGF0aHM6IHN0cmluZ1tdOyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQuY2FuY2VsZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQuZmlsZVBhdGhzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBwbGljYXRpb25QYXRoID0gcmVzdWx0LmZpbGVQYXRoc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcFBhdGhTZXR0aW5nLnNldERlc2MoYEFwcGxpY2F0aW9uIHdvcmtzcGFjZTogJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcHBsaWNhdGlvblBhdGh9YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuXG4gICAgICAgICAgICB2YXIgdGVzdFBhdGhTZXR0aW5nID0gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpO1xuXG4gICAgICAgICAgICB0ZXN0UGF0aFNldHRpbmdcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIlRlc3QgUGF0aFwiKVxuICAgICAgICAgICAgICAgIC5zZXREZXNjKGBUZXN0IHdvcmtzcGFjZTogJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy51bml0VGVzdFBhdGh9YClcbiAgICAgICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PlxuICAgICAgICAgICAgICAgICAgICBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KFwiU0VMRUNUIFVOSVQgVEVTVCBQQVRIXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljaygoY2IgOiBNb3VzZUV2ZW50KSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nLnNob3dPcGVuRGlhbG9nKHtwcm9wZXJ0aWVzOiBbJ29wZW5EaXJlY3RvcnknXSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihhc3luYyAocmVzdWx0OiB7IGNhbmNlbGVkOiBhbnk7IGZpbGVQYXRoczogc3RyaW5nW107IH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdC5jYW5jZWxlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdC5maWxlUGF0aHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy51bml0VGVzdFBhdGggPSByZXN1bHQuZmlsZVBhdGhzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBhdGhTZXR0aW5nLnNldERlc2MoYFRlc3Qgd29ya3NwYWNlOiAke3RoaXMucGx1Z2luLnNldHRpbmdzLnVuaXRUZXN0UGF0aH1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoXCJEb2N1bWVudGF0aW9uIFBhdGhcIilcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhcIlBhdGggdG8gZG9jdW1lbnQgd29ya3NwYWNlIHJlbGF0aXZlIGZyb20gdmF1bHRcIilcbiAgICAgICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIkVudGVyIHRoZSBkb2N1bWVudGF0aW9uIHBhdGhcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kb2N1bWVudFBhdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRvY3VtZW50UGF0aCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoXCJBcHBsaWNhdGlvbiB0eXBlXCIpXG4gICAgICAgICAgICAgICAgLnNldERlc2MoXCJUeXBlIG9mIGFwcGxpY2F0aW9uXCIpXG4gICAgICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3BEb3duID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcERvd25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCcuamF2YScsICdqYXZhJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCcucnMnLCAncnVzdCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignLmMnLCAnYycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignLmMrKycsICdjKysnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJy5jcHAnLCAnY3BwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCcuY3h4JywgJ2N4eCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignLnRzJywgJ3R5cGVzY3JpcHQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcHBsaWNhdGlvbkV4dGVuc2lvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9Plx0e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcHBsaWNhdGlvbkV4dGVuc2lvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIkFjdGl2YXRpb24gaW50ZXJ2YWxcIilcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhcIkFjdGl2YXRpb24gaW50ZXJ2YWwgaW4gbXNcIilcbiAgICAgICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIkVudGVyIHRoZSBhY3RpdmF0aW9uIGludGVydmFsXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2xlZXBMZW5ndGgudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2xlZXBMZW5ndGggPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoXCJOdW1iZXIgb2Ygc291cmNlIGZpbGVzIHRvIHByb2Nlc3NcIilcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhcIk51bWJlciBvZiBzb3VyY2UgZmlsZXMgdG8gcHJvY2VzcyBhdCBhIHRpbWVcIilcbiAgICAgICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIkVudGVyIHRoZSBzb3VyY2UgZmlsZSBwcm9jZXNzaW5nIGNvdW50XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZ3JvdXBCeVNpemUudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZ3JvdXBCeVNpemUgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICB9XG59IiwgImltcG9ydCB7IEFwcCB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBTb3VyY2VTY2FubmVyIGZyb20gJy4uL21haW4nO1xuaW1wb3J0IHsgc3RhdFN5bmMsIHJlYWRGaWxlU3luYywgZXhpc3RzU3luYywgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzJ1xuaW1wb3J0IHsgRmlsZVN5c3RlbUFkYXB0ZXIgfSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi9VdGlscydcbmltcG9ydCB7IERvY0ZvbGRlcnMgfSBmcm9tICcuL0RvY0ZvbGRlcnMnO1xuXG5leHBvcnQgY2xhc3MgU2NhblNvdXJjZSB7XG5cbiAgICBjb2RlU2Nhbm5lcjogKGFyZzA6IHN0cmluZykgPT4gc3RyaW5nO1xuXG4gICAgYXBwbGljYXRpb25QYXRoOiBzdHJpbmc7ICAgICAgICAgIC8vIGFwcGxpY2F0aW9uIHBhdGhcbiAgICBjb2RlRXh0ZW5zaW9uOiBzdHJpbmc7ICAgICAgICAgICAgLy8gdGhlIHNvdXJjZSBmaWxlIG5hbWUgZXh0ZW5zaW9uXG4gICAgZG9jdW1lbnRQYXRoOiBzdHJpbmc7ICAgICAgICAgICAgIC8vIGRvY3VtZW50IHBhdGggYWJzIHBhdGhcbiAgICB0ZXN0UGF0aDogc3RyaW5nOyAgICAgICAgICAgICAgICAgLy8gdW5pdCB0ZXN0IGNvZGUgcGF0aCBcbiAgICByZWxhdGl2ZURvY3VtZW50UGF0aDogc3RyaW5nOyAgICAgLy8gZG9jdW1lbnQgcGF0aCBhYnMgcmVsIGZyb20gdmF1bHQgcm9vdFxuICAgIGdyb3VwQnlTaXplOiBudW1iZXI7ICAgICAgICAgICAgICAvLyBudW1iZXIgb2YgZG9jdW1lbnRzIHRvIHByb2Nlc3MgYXQgYSB0aW1lIFxuICAgIHNsZWVwTGVuZ3RoOiBudW1iZXI7ICAgICAgICAgICAgICAvLyBudW1iZXIgb2Ygc2Vjb25kcyB0byBzbGVlcFxuICAgIHBoYXNlQ291bnQ6IG51bWJlciA9IDA7ICAgICAgICAgICAvLyBjdXJyZW50IHByb2Nlc3NzaW5nIHBoYXNlIFxuXG4gICAgYXBwbGljYXRpb25GaWxlTGlzdFdpdGhFeHRlbnNpb246IEFycmF5PEFycmF5PHN0cmluZz4+OyAvLyBhbGwgYXBwbGljYXRpb24gc291cmNlIGZpbGVzXG4gICAgdGVzdEZpbGVMaXN0V2l0aEV4dGVuc2lvbjogQXJyYXk8QXJyYXk8c3RyaW5nPj47ICAgICAgICAvLyBhbGwgdGVzdCBzb3VyY2UgZmlsZXNcbiAgICBkb2N1bWVudEZpbGVMaXN0V2l0aEV4dGVuc2lvbjogQXJyYXk8c3RyaW5nPjsgICAgICAgICAgIC8vIGFsbCBkb2N1bWVudHNcbiAgICBzb3VyY2VBbmREb2N1bWVudExpbmsgPSBuZXcgU2V0PHN0cmluZz47XG5cbiAgICBmc2E6IEZpbGVTeXN0ZW1BZGFwdGVyO1xuICAgIHV0aWxzOiBVdGlscztcblxuICAgIGRvY0ZvbGRlcnM6IERvY0ZvbGRlcnM7ICAgICAgICAgICAgLy8gZG9jdW1lbnQgZm9sZGVyc1xuXG4gICAgaW5pdChhcHA6IEFwcCwgcGx1Z2luOiBTb3VyY2VTY2FubmVyLCBzY2FubmVyOiAoYXJnMDogc3RyaW5nKSA9PiBzdHJpbmcpIHtcblxuICAgICAgICB0aGlzLmNvZGVTY2FubmVyID0gc2Nhbm5lcjtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvblBhdGggPSBwbHVnaW4uc2V0dGluZ3MuYXBwbGljYXRpb25QYXRoO1xuICAgICAgICB0aGlzLmNvZGVFeHRlbnNpb24gPSBwbHVnaW4uc2V0dGluZ3MuYXBwbGljYXRpb25FeHRlbnNpb247XG4gICAgICAgIHRoaXMuZG9jdW1lbnRQYXRoID0gcGx1Z2luLnNldHRpbmdzLmRvY3VtZW50UGF0aDtcbiAgICAgICAgdGhpcy50ZXN0UGF0aCA9IHBsdWdpbi5zZXR0aW5ncy51bml0VGVzdFBhdGg7XG4gICAgICAgIHRoaXMuZ3JvdXBCeVNpemUgPSBwbHVnaW4uc2V0dGluZ3MuZ3JvdXBCeVNpemU7XG4gICAgICAgIHRoaXMuc2xlZXBMZW5ndGggPSBwbHVnaW4uc2V0dGluZ3Muc2xlZXBMZW5ndGg7XG4gICAgICAgIHRoaXMudXRpbHMgPSBuZXcgVXRpbHMoYXBwKTtcbiAgICAgICAgdGhpcy5mc2EgPSBhcHAudmF1bHQuYWRhcHRlciBhcyBGaWxlU3lzdGVtQWRhcHRlcjtcblxuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5ydW4oKSwgdGhpcy5zbGVlcExlbmd0aCk7XG4gICAgfVxuXG4gICAgcnVuKCkge1xuICAgICAgICAvL1xuICAgICAgICAvLyB0aGUgZm9sZGVycyBtaWdodCBoYXZlIGJlZW4gZGVsZXRlZCBvciB0aGlzIGlzIHRoZSBmaXJzdCBzdGFydCBvZiB0aGUgYXBwXG4gICAgICAgIC8vIHNvIGNyZWF0ZSB0aGUgZm9sZGVycyBpZmYgdGhleSBkbyBub3QgZXhpc3RcbiAgICAgICAgLy9cbiAgICAgICAgdGhpcy5kb2NGb2xkZXJzID0gdGhpcy51dGlscy5jcmVhdGVGb2xkZXJzKHRoaXMuZG9jdW1lbnRQYXRoKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gZG8gd29yayBpbiBwaGFzZXNcbiAgICAgICAgLy8gZ2V0IGFsbCB0aGUgaW1wbGVtZW50YXRpb24gYW5kIHRlc3QgZmlsZXMgaW50byBhIGxpc3Qgb2YgY2h1bmtzIGF0IG1vc3QgZ3JvdXBCeVNpemVcbiAgICAgICAgLy9cbiAgICAgICAgaWYgKHRoaXMucGhhc2VDb3VudCA9PSAxLjApIHtcbiAgICAgICAgICAgIGNvbnN0IGltcEZpbGVzID0gdGhpcy51dGlscy5maWx0ZXJGaWxlTmFtZXNCeUV4dGVuc2lvbihcbiAgICAgICAgICAgICAgICB0aGlzLmNvZGVFeHRlbnNpb24sXG4gICAgICAgICAgICAgICAgdGhpcy51dGlscy53YWxrSW5Gb2xkZXJGcm9tRGlyKHRoaXMuYXBwbGljYXRpb25QYXRoLCBbXSkpO1xuXG4gICAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uRmlsZUxpc3RXaXRoRXh0ZW5zaW9uID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW1wRmlsZXMubGVuZ3RoOyBpICs9IHRoaXMuZ3JvdXBCeVNpemUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaHVuayA9IGltcEZpbGVzLnNsaWNlKGksIGkgKyB0aGlzLmdyb3VwQnlTaXplKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uRmlsZUxpc3RXaXRoRXh0ZW5zaW9uLnB1c2goY2h1bmspO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB0ZXN0RmlsZXMgPSB0aGlzLnV0aWxzLmZpbHRlckZpbGVOYW1lc0J5RXh0ZW5zaW9uKFxuICAgICAgICAgICAgICAgIHRoaXMuY29kZUV4dGVuc2lvbixcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWxzLndhbGtJbkZvbGRlckZyb21EaXIodGhpcy50ZXN0UGF0aCwgW10pKTtcblxuICAgICAgICAgICAgdGhpcy50ZXN0RmlsZUxpc3RXaXRoRXh0ZW5zaW9uID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGVzdEZpbGVzLmxlbmd0aDsgaSArPSB0aGlzLmdyb3VwQnlTaXplKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSB0ZXN0RmlsZXMuc2xpY2UoaSwgaSArIHRoaXMuZ3JvdXBCeVNpemUpO1xuICAgICAgICAgICAgICAgIHRoaXMudGVzdEZpbGVMaXN0V2l0aEV4dGVuc2lvbi5wdXNoKGNodW5rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyBnZXQgbGlzdCBvZiBkb2N1bWVudCBmaWxlc1xuICAgICAgICAvLyAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLnBoYXNlQ291bnQgPT0gMi4wKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlcyA9IHRoaXMudXRpbHMuZmlsdGVyRmlsZU5hbWVzQnlFeHRlbnNpb24oXG4gICAgICAgICAgICAgICAgJy5tZCcsXG4gICAgICAgICAgICAgICAgdGhpcy51dGlscy53YWxrSW5Gb2xkZXJGcm9tRGlyKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZzYS5nZXRCYXNlUGF0aCgpICsgdGhpcy51dGlscy5zZXBhcmF0b3IgKyB0aGlzLmRvY0ZvbGRlcnMuc2V0dGluZ3NDb21tZW50Rm9sZGVyLCBbXVxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudEZpbGVMaXN0V2l0aEV4dGVuc2lvbiA9IGZpbGVzXG4gICAgICAgICAgICAgICAgLm1hcChmaWxlTmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlTmFtZS5yZXBsYWNlKHRoaXMuZnNhLmdldEJhc2VQYXRoKCkgKyB0aGlzLnV0aWxzLnNlcGFyYXRvciwgXCJcIik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyBpZiB0aGUgc291cmNlIGlmIHlvdW5nZXIgdGhlbiB0aGUgZG9jdW1lbnQgZmlsZSBPUiBkb2N1bWVudCBmaWxlIGhhZCB0byBiZSBjcmVhdGVkIHRoZW5cbiAgICAgICAgLy8gICAgbG9hZCB0aGUgbGluZXMgZnJvbSB0aGUgc291cmNlIGZpbGUgYW5kIHNjYW4gZm9yIGNvbW1lbnRzLlxuICAgICAgICAvLyAgICB3cml0ZSBjb21tZW50cyBvdXQgdG8gZG9jdW1lbnQgZmlsZVxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGZpbGVzIGV4aXN0IGJlZm9yZSBnZXR0aW5nIHRoZWlyIHN0YXQgaW5mb3JtYXRpb25cbiAgICAgICAgLy9cbiAgICAgICAgaWYgKHRoaXMucGhhc2VDb3VudCA9PSAzLjAgJiYgdGhpcy5hcHBsaWNhdGlvbkZpbGVMaXN0V2l0aEV4dGVuc2lvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlc1RvQ2hlY2sgPSB0aGlzLmFwcGxpY2F0aW9uRmlsZUxpc3RXaXRoRXh0ZW5zaW9uLnBvcCgpO1xuICAgICAgICAgICAgaWYgKGZpbGVzVG9DaGVjayAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBmaWxlc1RvQ2hlY2suZm9yRWFjaChzcmNGaWxlID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudE5hbWUgPSB0aGlzLmNyZWF0ZURvY05hbWVGcm9tU291cmNlTmFtZShzcmNGaWxlLCB0aGlzLmFwcGxpY2F0aW9uUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50TmFtZUFuZFBhdGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5kb2N1bWVudFBhdGh9JHt0aGlzLnV0aWxzLnNlcGFyYXRvcn1jb21tZW50cyR7dGhpcy51dGlscy5zZXBhcmF0b3J9JHtkb2N1bWVudE5hbWV9YDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9jRnVsbFBhdGhuYW1lID0gYCR7dGhpcy5mc2EuZ2V0QmFzZVBhdGgoKX0ke3RoaXMudXRpbHMuc2VwYXJhdG9yfSR7ZG9jdW1lbnROYW1lQW5kUGF0aH1gO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlQW5kRG9jdW1lbnRMaW5rLmFkZChkb2N1bWVudE5hbWVBbmRQYXRoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvQWN0dWFsU2Nhbm5pbmcoZG9jdW1lbnROYW1lQW5kUGF0aCwgc3JjRmlsZSwgZG9jRnVsbFBhdGhuYW1lKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHRoaXMucGhhc2VDb3VudCA9IDIuMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBoYXNlQ291bnQgPT0gNC4wICYmIHRoaXMudGVzdEZpbGVMaXN0V2l0aEV4dGVuc2lvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlc1RvQ2hlY2sgPSB0aGlzLnRlc3RGaWxlTGlzdFdpdGhFeHRlbnNpb24ucG9wKCk7XG4gICAgICAgICAgICBpZiAoZmlsZXNUb0NoZWNrICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZpbGVzVG9DaGVjay5mb3JFYWNoKHNyY0ZpbGUgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlc3REb2N1bWVudE5hbWUgPSB0aGlzLmNyZWF0ZURvY05hbWVGcm9tU291cmNlTmFtZShzcmNGaWxlLCB0aGlzLnRlc3RQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVzdERvY3VtZW50TmFtZUFuZFBhdGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5kb2N1bWVudFBhdGh9JHt0aGlzLnV0aWxzLnNlcGFyYXRvcn10ZXN0IGNvbW1lbnRzJHt0aGlzLnV0aWxzLnNlcGFyYXRvcn0ke3Rlc3REb2N1bWVudE5hbWV9YDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9jRnVsbFBhdGhuYW1lID0gYCR7dGhpcy5mc2EuZ2V0QmFzZVBhdGgoKX0ke3RoaXMudXRpbHMuc2VwYXJhdG9yfSR7dGVzdERvY3VtZW50TmFtZUFuZFBhdGh9YDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvQWN0dWFsU2Nhbm5pbmcodGVzdERvY3VtZW50TmFtZUFuZFBhdGgsIHNyY0ZpbGUsIGRvY0Z1bGxQYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB0aGlzLnBoYXNlQ291bnQgPSA0LjA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5waGFzZUNvdW50ID09IDUuMCkge1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIGV2ZXJ5IG1kIGRvY3VtZW50IHRoYXQgZG9lcyBub3QgaGF2ZSBhIHNvdXJjZSBmaWxlIG11c3QgYmUgcmVtb3ZlZFxuICAgICAgICAgICAgLy8gdGhlIHNvdXJjZSBhbmQgZG9jdW1lbnQgbGluayBpcyB0aGUgc291cmNlIGZpbGUgdGhhdCBzaG91bGQgYmUgaW4gdGhlIFxuICAgICAgICAgICAgLy8gZG9jdW1lbnQgZmlsZSBsaXN0LiBcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50RmlsZUxpc3RXaXRoRXh0ZW5zaW9uLmZvckVhY2goZmlsZU5hbWUgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zb3VyY2VBbmREb2N1bWVudExpbmsuaGFzKGZpbGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWxzLmZzYS5yZW1vdmUoZmlsZU5hbWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGhpcy5zb3VyY2VBbmREb2N1bWVudExpbmsuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMucGhhc2VDb3VudCA9IC0xLjA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBoYXNlQ291bnQgKz0gMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiB0aGUgZmlsZSBzeXN0ZW0gZnVsbCBkb2MgbmFtZSBhbmQgcGF0aCBzY2FuIHRoZSBzb3VyY2UgZmlsZSBhbmQgcGxhY2UgZG9jdW1lbnQgXG4gICAgICogaW4gdGhlIGRvY3VtZW50IG5hbWUgYW5kIHBhdGggbG9jYXRpb25cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnROYW1lQW5kUGF0aCB2YXVsdCBwYXRoIG9mIHRoZSBtZCBkb2N1bWVudFxuICAgICAqIEBwYXJhbSBzcmNGaWxlIHRvIHNjYW4gc291cmNlIGZpbGUgdG8gc2NhblxuICAgICAqIEBwYXJhbSBkb2NGdWxsUGF0aG5hbWUgZmlsYSBkb2N1bWVudCBuYW1lIGFuZCBwYXRoIGZyb20gdGhlIHJvb3Qgb2YgdGhlIGZpbGUgc3lzdGVtXG4gICAgICovXG4gICAgcHJpdmF0ZSBkb0FjdHVhbFNjYW5uaW5nKGRvY3VtZW50TmFtZUFuZFBhdGg6IHN0cmluZywgc3JjRmlsZTogc3RyaW5nLCBkb2NGdWxsUGF0aG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNvdXJjZUFuZERvY3VtZW50TGluay5hZGQoZG9jdW1lbnROYW1lQW5kUGF0aCk7XG5cbiAgICAgICAgY29uc3Qgc3JjRmlsZUV4aXN0cyA9IGV4aXN0c1N5bmMoc3JjRmlsZSk7XG4gICAgICAgIGlmICghc3JjRmlsZUV4aXN0cykge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdUZXN0IHNvdXJjZSBmaWxlIGdvbmUgJyArIHNyY0ZpbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc3JjU3RhdCA9IHN0YXRTeW5jKHNyY0ZpbGUpO1xuXG4gICAgICAgICAgICB2YXIgY3JlYXRlZEZpbGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGRvY0ZpbGVFeGlzdHMgPSBleGlzdHNTeW5jKGRvY0Z1bGxQYXRobmFtZSk7XG4gICAgICAgICAgICB2YXIgZG9jU3RhdDogYW55O1xuICAgICAgICAgICAgdmFyIGNyZWF0ZWRGaWxlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZG9jRmlsZUV4aXN0cykge1xuICAgICAgICAgICAgICAgIGRvY1N0YXQgPSBzdGF0U3luYyhkb2NGdWxsUGF0aG5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3cml0ZUZpbGVTeW5jKGRvY0Z1bGxQYXRobmFtZSwgXCJcIik7XG4gICAgICAgICAgICAgICAgY3JlYXRlZEZpbGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jU3RhdCA9IHN0YXRTeW5jKGRvY0Z1bGxQYXRobmFtZSk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gc291cmNlIGlzIG9sZGVyIHRoYW4gdGhlIGRvYyBhcyBzZWVuIGZyb20gMTk3MCAtPiBvbndhcmRzIE9SXG4gICAgICAgICAgICAvLyBkb2NzIGhhdmUganVzdCBiZWVuIGNyZWF0ZWQuXG4gICAgICAgICAgICAvLyBcbiAgICAgICAgICAgIGlmIChjcmVhdGVkRmlsZSB8fCBkb2NTdGF0Lm10aW1lTXMgPCBzcmNTdGF0Lm10aW1lTXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcmNMaW5lcyA9IHJlYWRGaWxlU3luYyhzcmNGaWxlLCB7IGVuY29kaW5nOiAndXRmOCcsIGZsYWc6ICdyJyB9KTtcbiAgICAgICAgICAgICAgICB2YXIgYWxsQ29tbWVudHM7XG4gICAgICAgICAgICAgICAgdmFyIGNvbW1lbnRzID0gXCJOT05FXCI7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudHMgPSB0aGlzLmNvZGVTY2FubmVyKHNyY0xpbmVzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnRzICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ29tbWVudHMgPSBjb21tZW50cy5yZXBsYWNlQWxsKC9cXG5cXHMrXFwqL2csIFwiXFxuXCIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciBpbiBzY2FuIGZvciBmaWxlIFwiICsgc3JjRmlsZSk7IFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJDb21tZW50ID0gYFtTb3VyY2VdKGZpbGU6Ly8ke3NyY0ZpbGV9KVxcblxcbi0tLVxcbmA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnNhLndyaXRlKGRvY3VtZW50TmFtZUFuZFBhdGgsIGhlYWRlckNvbW1lbnQgKyBjb21tZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhbGxDb21tZW50cyA9PSBcInVucGFpcmVkIHN1cnJvZ2F0ZXNcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIGluIHNjYW4gZm9yIGZpbGUgXCIgKyBzcmNGaWxlKTsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlckNvbW1lbnQgPSBgW1NvdXJjZV0oZmlsZTovLyR7c3JjRmlsZX0pXFxuXFxuLS0tXFxuYDtcbiAgICAgICAgICAgICAgICB0aGlzLmZzYS53cml0ZShkb2N1bWVudE5hbWVBbmRQYXRoLCBoZWFkZXJDb21tZW50ICsgYWxsQ29tbWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZG9jdW1lbnQgZmlsZSBuYW1lIHVzaW5nIHRoZSBzb3VyY2UgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIHNvdXJjZUZpbGUgdG8gY3JlYXRlIGEgZG9jdW1lbnQgZmlsZSBmcm9tXG4gICAgICogQHJldHVybnMgdGhlIGRvY3VtZW50IGZpbGVcbiAgICAgKi9cbiAgICBjcmVhdGVEb2NOYW1lRnJvbVNvdXJjZU5hbWUoc291cmNlRmlsZTogc3RyaW5nLCBhcHBsaWNhdGlvblBhdGg6IHN0cmluZykge1xuICAgICAgICAvLyBnZXQgb25seSB0aGUgbmFtZSBvZiB0aGUgZmlsZVxuICAgICAgICB2YXIgZmlsZU5hbWUgPSBzb3VyY2VGaWxlXG4gICAgICAgICAgICAucmVwbGFjZShhcHBsaWNhdGlvblBhdGggKyB0aGlzLnV0aWxzLnNlcGFyYXRvciwgJycpXG4gICAgICAgICAgICAucmVwbGFjZSh0aGlzLmNvZGVFeHRlbnNpb24sICcubWQnKTtcbiAgICAgICAgLy8gcmVwbGFjZSBhbGwgYWNjdXJlbmNlc1xuICAgICAgICB3aGlsZSAoZmlsZU5hbWUuY29udGFpbnModGhpcy51dGlscy5zZXBhcmF0b3IpKSB7XG4gICAgICAgICAgICBmaWxlTmFtZSA9IGZpbGVOYW1lLnJlcGxhY2UodGhpcy51dGlscy5zZXBhcmF0b3IsICcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbGVOYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBhIHBhdGggdG8gdGhlIHNvdXJjZSBmaWxlIHJlbGF0aXZlIHRvIHRoZSB2YXVsdFxuICAgICAqIEBwYXJhbSBzb3VyY2VGaWxlIHRoZSBzb3VyY2UgY29kZSBmaWxlXG4gICAgICogQHBhcmFtIGRvY3VtZW50UGFydCB0aGUgZG9jdW1lbnQgZmlsZVxuICAgICAqIEByZXR1cm5zIHRoZSBwYXRoIHRvIHRoZSBzb3VyY2UgcmVsYXRpdmUgdG8gdGhlIHZhdWx0XG4gICAgICovXG4gICAgY3JlYXRlUmVsYXRpdmVQYXRoKHNvdXJjZUZpbGU6IHN0cmluZywgZG9jdW1lbnRQYXJ0OiBzdHJpbmcpIHtcbiAgICAgICAgdmFyIHNvdXJjZUZpbGVQYXJ0cyA9IHNvdXJjZUZpbGUuc3BsaXQodGhpcy51dGlscy5zZXBhcmF0b3IpO1xuICAgICAgICB2YXIgZG9jdW1lbnRBbmRQYXRoUGFydHMgPSBgJHt0aGlzLnV0aWxzLmZzYS5nZXRCYXNlUGF0aCgpfS8ke2RvY3VtZW50UGFydH1gLnNwbGl0KCcvJyk7XG5cbiAgICAgICAgd2hpbGUgKHNvdXJjZUZpbGVQYXJ0c1swXSA9PSBkb2N1bWVudEFuZFBhdGhQYXJ0c1swXSkge1xuICAgICAgICAgICAgc291cmNlRmlsZVBhcnRzID0gc291cmNlRmlsZVBhcnRzLnNsaWNlKDEpO1xuICAgICAgICAgICAgZG9jdW1lbnRBbmRQYXRoUGFydHMgPSBkb2N1bWVudEFuZFBhdGhQYXJ0cy5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBnbyB1cCBmcm9tIGN1cnJlbnQgZm9sZGVyIGRvY3VtZW50QW5kUGF0aFBhcnRzIGxlbmd0aCAtIDFcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50QW5kUGF0aFBhcnRzLmZpbHRlcih2YWx1ZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gIXZhbHVlLmVuZHNXaXRoKCcubWQnKVxuICAgICAgICB9KVxuICAgICAgICAgICAgLm1hcCh2YWx1ZSA9PiAnLi4nKVxuICAgICAgICAgICAgLmNvbmNhdChzb3VyY2VGaWxlUGFydHMpLmpvaW4oJy8nKTtcblxuXG4gICAgfVxufSIsICJpbXBvcnQgeyBBcHAgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBzdGF0U3luYywgcmVhZGRpclN5bmMsIG1rZGlyU3luYyB9IGZyb20gJ2ZzJ1xuaW1wb3J0IHsgRmlsZVN5c3RlbUFkYXB0ZXIgfSBmcm9tICdvYnNpZGlhbidcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJykucmVtb3RlXG5pbXBvcnQgeyBEb2NGb2xkZXJzIH0gZnJvbSAnLi9Eb2NGb2xkZXJzJztcblxuZXhwb3J0IGNsYXNzIFV0aWxzIHtcbiAgICBhcHA6IEFwcDtcbiAgICAvL1xuICAgIC8vIGZpbGUgc3lzdGVtIHBhdGggc2VwYXJhdG9yXG4gICAgLy9cbiAgICBwdWJsaWMgc2VwYXJhdG9yID0gJy8nO1xuICAgIC8vXG4gICAgLy8gb2JzaWRpYW4gZmlsZSBzeXN0ZW0gYWRhcHRvclxuICAgIC8vXG4gICAgZnNhIDogRmlsZVN5c3RlbUFkYXB0ZXI7XG4gICAgLy9cbiAgICAvLyByZWdleHAgZm9yIGZpbmRpbmcgbWFya2VycyBhbmQgZmlsZSBwYXRoIGV4cHJlc3Npb25zXG4gICAgLy8gZWcgOiBeSklSQTEyMzQtMTIzLXRlc3QtMDAxLWJsYTAwLTg3LXp6ejAwLTA4XG4gICAgLy8gICAgICAgLS0tLS0tLS0tLS0tIHN0b3J5IG1hcmtlciAgXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGZpbGUgZm9sZGVyIGFuZCBjb21tZW50IG1hcmtlcnNcbiAgICAvL1xuICAgIG1hcmtlclJlZ0V4cCA9IC9cXHNcXF5bYS16QS1aXStbYS16QS1aMC05XStcXC1bMC05XSsoXFwtW2EtekEtWl0rW2EtekEtWjAtOV0rXFwtWzAtOV0rKSovZztcblxuICAgIGNvbnN0cnVjdG9yKGFwcCA6IEFwcCkgeyBcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuZnNhID0gdGhpcy5hcHAudmF1bHQuYWRhcHRlciBhcyBGaWxlU3lzdGVtQWRhcHRlcjtcbiAgICB9XG5cbiAgICAvKiogXG4gICAgICogbWFrZSBzdXJlIHRoZSBzZXBhcmF0b3IgcmVnZXggZG9lcyBub3QgaGF2ZSBzaW5nbGUgJ1xcJ1xuICAgICAqL1xuICAgIHRvVmF1bHRUeXBlU2VwZXJhdG9yKCkgeyBpZiAodGhpcy5zZXBhcmF0b3IgPT0gJ1xcXFwnKSB7cmV0dXJuICcvJ30gZWxzZSB7cmV0dXJuICcvJ319XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmUgd2FsayB0aGUgZm9sZGVyIGluIGEgbm9uIHZhdWx0IGxvY2F0aW9uLiBHZXQgYWxsIGZpbGUgbmFtZXMgZnJvbVxuICAgICAqIGRpciBhbmQgZG93bndhcmRzXG4gICAgICogQHBhcmFtIGRpciB0byBzY2FuIGZyb21cbiAgICAgKiBAcGFyYW0gZmlsZXMgbGlzdCB3aXRoIGZvbGRlciBuYW1lc1xuICAgICAqIEByZXR1cm5zIGZpbGUgQXJyYXlcbiAgICAgKi9cbiAgICB3YWxrSW5Gb2xkZXJGcm9tRGlyKGRpciA6IHN0cmluZywgZmlsZXMgOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgICAgIGNvbnN0IGZpbGVMaXN0ID0gcmVhZGRpclN5bmMoZGlyKVxuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZUxpc3QpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gYCR7ZGlyfSR7dGhpcy5zZXBhcmF0b3J9JHtmaWxlfWBcbiAgICAgICAgICAgIGlmIChzdGF0U3luYyhuYW1lKS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YWxrSW5Gb2xkZXJGcm9tRGlyKG5hbWUsIGZpbGVzKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKG5hbWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbGVzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIGZpbGVzIGJ5IGV4dGVuc2lvbiB2YWx1ZVxuICAgICAqIEBwYXJhbSBleHRlbnNpb24gdG8gZmlsdGVyIGJ5XG4gICAgICogQHBhcmFtIGZpbGVzIHRvIGZpbHRlciBieSBcbiAgICAgKiBAcmV0dXJucyBmaWx0ZXJlZCBmaWxlIG5hbWVzXG4gICAgICovXG4gICAgZmlsdGVyRmlsZU5hbWVzQnlFeHRlbnNpb24oZXh0ZW5zaW9uIDogc3RyaW5nLCBmaWxlcyA6IEFycmF5PHN0cmluZz4pIDogQXJyYXk8c3RyaW5nPiB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuICAgICAgICByZXN1bHQgPSBmaWxlcy5maWx0ZXIoZmlsZU5hbWUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGVOYW1lLmVuZHNXaXRoKGV4dGVuc2lvbik7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGFsbCB0aGUgLm1kIGZpbGVzIGZyb20gdGhlIGZvbGRlciByZWN1cnNpdmx5XG4gICAgICogQHBhcmFtIGZvbGRlciB0byBnZXQgdGhlIG1kIGZpbGUgZnJvbVxuICAgICAqIEByZXR1cm5zIGxpc3Qgb2YgbWQgZmlsZXMgaW4gdGhlIGZvbGRlclxuICAgICAqL1xuICAgIGxpc3RNREZpbGVzSW5WYXVsdChmb2xkZXIgOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgY29tbWVudEJhc2VQYXRoID0gYCR7dGhpcy5mc2EuZ2V0QmFzZVBhdGgoKX0ke3RoaXMuc2VwYXJhdG9yfSR7Zm9sZGVyfWBcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyRmlsZU5hbWVzQnlFeHRlbnNpb24oXG4gICAgICAgICAgICAnLm1kJyxcbiAgICAgICAgICAgIHRoaXMud2Fsa0luRm9sZGVyRnJvbURpcihjb21tZW50QmFzZVBhdGgsIFtdKSlcbiAgICAgICAgICAgIC5tYXAodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IHZhbHVlLnJlcGxhY2UoYCR7dGhpcy5mc2EuZ2V0QmFzZVBhdGgoKX1gLCAnJyk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGZpbGVOYW1lLmNvbnRhaW5zKGBcXFxcYCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWUgPSBmaWxlTmFtZS5yZXBsYWNlKGAke3RoaXMuc2VwYXJhdG9yfWAsJy8nKTsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlTmFtZTtcbiAgICAgICAgICAgIH0pOyAgICAgICAgXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIyMgbWFrZURpckluVmF1bHRcbiAgICAgKiBNYWtlIGEgZm9sZGVyIHBhdGggaW4gdGhlIHZhdWx0LiBEcm9wIHRoZSBmaWxlIG5hbWUgLCBrZWVwIHRoZSBwYXRoIGFuZCBjcmVhdGUgaXQuXG4gICAgICogQHBhcmFtIGZzYVxuICAgICAqIEBwYXJhbSBmaWxlUGF0aEFuZE5hbWVcbiAgICAgKi9cbiAgICBtYWtlRGlySW5WYXVsdChmaWxlUGF0aEFuZE5hbWUgOiBzdHJpbmcpIHtcbiAgICAgICAgdmFyIGZpbGVQYXRoID0gZmlsZVBhdGhBbmROYW1lLnNwbGl0KHRoaXMudG9WYXVsdFR5cGVTZXBlcmF0b3IoKSk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGRyb3AgZmlsZSBuYW1lIGZyb20gcGF0aCBhbmQgbmFtZSBhbmQgc3RhcnQgZnJvbSB0aGUgcm9vdCBvZiB0aGUgdmF1bHRcbiAgICAgICAgLy9cbiAgICAgICAgZmlsZVBhdGggPSBmaWxlUGF0aC5zbGljZSgwLCBmaWxlUGF0aC5sZW5ndGggLSAxKS5zbGljZSgxKTtcbiAgICAgICAgZmlsZVBhdGhbMF0gPSBgLyR7ZmlsZVBhdGhbMF19YDtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gY29uc3RydWN0IHBhdGggc3RlcCBieSBzdGVwIFxuICAgICAgICAvL1xuICAgICAgICB2YXIgY29uc3RydWN0ZWRQYXRoIDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgd2hpbGUgKGZpbGVQYXRoLmxlbmd0aCA+IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdGVkUGF0aC5wdXNoKCBmaWxlUGF0aFswXSApO1xuICAgICAgICAgICAgdGhpcy5mc2EubWtkaXIoY29uc3RydWN0ZWRQYXRoLmpvaW4oJy8nKSk7XG4gICAgICAgICAgICBmaWxlUGF0aCA9IGZpbGVQYXRoLnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogb3JkZXIgc2V0IGFuZCByZXR1cm4gb3JkZXJlZCBzZXRcbiAgICAgKiBAcGFyYW0gc2V0IHRvIG9yZGVyXG4gICAgICovXG4gICAgc29ydFNldE9mU3RyaW5nKHNldCA6IFNldDxzdHJpbmc+KSA6IFNldDxzdHJpbmc+IHtcbiAgICAgICAgY29uc3Qgc29ydGVkQXJyYXkgPSBBcnJheS5mcm9tKHNldCkuc29ydCgpO1xuICAgICAgICByZXR1cm4gbmV3IFNldDxzdHJpbmc+KHNvcnRlZEFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqICMjIGNyZWF0ZUZvbGRlcnNcbiAgICAqIENyZWF0ZSBmb2xkZXIgYmVsb3cgZG9jdW1lbnQgcGF0aFxuICAgICpcbiAgICAqIEBwYXJhbSBkb2NQYXRoIHRoYXQgd2FzIHNldCBieSB1c2VyXG4gICAgKiBAcmV0dXJuIHRoZSBEb2NGb2xkZXIgaW5zdGFuY2VcbiAgICAqL1xuICAgIGNyZWF0ZUZvbGRlcnMoZG9jUGF0aCA6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzZXR0aW5nc0Jhc2UxID0gYCR7dGhpcy5mc2EuZ2V0QmFzZVBhdGgoKX0ke3RoaXMuc2VwYXJhdG9yfSR7ZG9jUGF0aH0ke3RoaXMuc2VwYXJhdG9yfWBcbiAgICAgICAgY29uc3Qgc2V0dGluZ3NTdG9yeUZvbGRlcjEgPSBzZXR0aW5nc0Jhc2UxICsgJ3N0b3JpZXMnO1xuICAgICAgICBjb25zdCBzZXR0aW5nc1NvbHV0aW9uRm9sZGVyMSA9IHNldHRpbmdzQmFzZTEgKyAnc29sdXRpb25zJztcbiAgICAgICAgY29uc3Qgc2V0dGluZ3NNYXJrZXJNYXBwaW5nMSA9IHNldHRpbmdzQmFzZTEgKyAnbWFya2VyJztcbiAgICAgICAgY29uc3Qgc2V0dGluZ3NDb21tZW50c01hcHBpbmcxID0gc2V0dGluZ3NCYXNlMSArICdjb21tZW50cyc7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzVGVzdENvbW1lbnRzTWFwcGluZzEgPSBzZXR0aW5nc0Jhc2UxICsgJ3Rlc3QgY29tbWVudHMnICAgICAgICBcbiAgICAgICAgY29uc3Qgc2V0dGluZ3NVbml0VGVzdE1hcHBpbmcxID0gc2V0dGluZ3NCYXNlMSArICd1bml0IHRlc3RzJyAgICAgICAgXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGNyZWF0ZSBmb2xkZXJzIGluIHZhdWx0XG4gICAgICAgIC8vXG4gICAgICAgIG1rZGlyU3luYyhzZXR0aW5nc1N0b3J5Rm9sZGVyMSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgIG1rZGlyU3luYyhzZXR0aW5nc1NvbHV0aW9uRm9sZGVyMSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgIG1rZGlyU3luYyhzZXR0aW5nc01hcmtlck1hcHBpbmcxLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgbWtkaXJTeW5jKHNldHRpbmdzQ29tbWVudHNNYXBwaW5nMSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgIG1rZGlyU3luYyhzZXR0aW5nc1Rlc3RDb21tZW50c01hcHBpbmcxLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgbWtkaXJTeW5jKHNldHRpbmdzVW5pdFRlc3RNYXBwaW5nMSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgXG4gICAgICAgIGNvbnN0IHNldHRpbmdzQmFzZSA9IGAke2RvY1BhdGh9JHt0aGlzLnNlcGFyYXRvcn1gO1xuICAgICAgICBjb25zdCBzZXR0aW5nc1N0b3J5Rm9sZGVyID0gc2V0dGluZ3NCYXNlICsgJ3N0b3JpZXMnO1xuICAgICAgICBjb25zdCBzZXR0aW5nc1NvbHV0aW9uRm9sZGVyID0gc2V0dGluZ3NCYXNlICsgJ3NvbHV0aW9ucyc7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzTWFya2VyTWFwcGluZyA9IHNldHRpbmdzQmFzZSArICdtYXJrZXInO1xuICAgICAgICBjb25zdCBzZXR0aW5nc0NvbW1lbnRzTWFwcGluZyA9IHNldHRpbmdzQmFzZSArICdjb21tZW50cyc7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzVGVzdENvbW1lbnRzTWFwcGluZyA9IHNldHRpbmdzQmFzZSArICd0ZXN0IGNvbW1lbnRzJztcbiAgICAgICAgY29uc3Qgc2V0dGluZ3NVbml0VGVzdE1hcHBpbmcgPSBzZXR0aW5nc0Jhc2UgKyAndW5pdCB0ZXN0cyc7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBEb2NGb2xkZXJzKFxuICAgICAgICAgICAgc2V0dGluZ3NTdG9yeUZvbGRlciwgXG4gICAgICAgICAgICBzZXR0aW5nc1NvbHV0aW9uRm9sZGVyLFxuICAgICAgICAgICAgc2V0dGluZ3NNYXJrZXJNYXBwaW5nLFxuICAgICAgICAgICAgc2V0dGluZ3NDb21tZW50c01hcHBpbmcsXG4gICAgICAgICAgICBzZXR0aW5nc1Rlc3RDb21tZW50c01hcHBpbmcsXG4gICAgICAgICAgICBzZXR0aW5nc1VuaXRUZXN0TWFwcGluZ1xuICAgICAgICAgICAgKTtcbiAgICB9XG5cbn0iLCAiZXhwb3J0IGNsYXNzIERvY0ZvbGRlcnMge1xuICAgIHNldHRpbmdzU3RvcnlGb2xkZXI6IHN0cmluZztcbiAgICBzZXR0aW5nc1NvbHV0aW9uRm9sZGVyOiBzdHJpbmc7XG4gICAgc2V0dGluZ3NNYXJrZXJGb2xkZXI6IHN0cmluZztcbiAgICBzZXR0aW5nc0NvbW1lbnRGb2xkZXI6IHN0cmluZztcbiAgICBzZXR0aW5nc1Rlc3RDb21tZW50Rm9sZGVyOiBzdHJpbmc7XG4gICAgc2V0dGluZ3NVbml0VGVzdEZvbGRlcjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3Ioc3RvcnlGb2xkZXI6IHN0cmluZywgc29sdXRpb25Gb2xkZXI6IHN0cmluZywgbWFya2VyTWFwcGluZzogc3RyaW5nLCBjb21tZW50TWFwcGluZzogc3RyaW5nLCB0ZXN0Q29tbWVudE1hcHBpbmc6IHN0cmluZyxcbiAgICAgICAgc2V0dGluZ3NVbml0VGVzdE1hcHBpbmc6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNldHRpbmdzU3RvcnlGb2xkZXIgPSBzdG9yeUZvbGRlcjtcbiAgICAgICAgdGhpcy5zZXR0aW5nc1NvbHV0aW9uRm9sZGVyID0gc29sdXRpb25Gb2xkZXI7XG4gICAgICAgIHRoaXMuc2V0dGluZ3NNYXJrZXJGb2xkZXIgPSBtYXJrZXJNYXBwaW5nXG4gICAgICAgIHRoaXMuc2V0dGluZ3NDb21tZW50Rm9sZGVyID0gY29tbWVudE1hcHBpbmc7XG4gICAgICAgIHRoaXMuc2V0dGluZ3NUZXN0Q29tbWVudEZvbGRlciA9IHRlc3RDb21tZW50TWFwcGluZztcbiAgICAgICAgdGhpcy5zZXR0aW5nc1VuaXRUZXN0Rm9sZGVyID0gc2V0dGluZ3NVbml0VGVzdE1hcHBpbmc7XG4gICAgfVxufSIsICJpbXBvcnQgeyBBcHAsIEZpbGVTeXN0ZW1BZGFwdGVyIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuL1V0aWxzJ1xuaW1wb3J0IHsgRG9jRm9sZGVycyB9IGZyb20gJy4vRG9jRm9sZGVycyc7XG5pbXBvcnQgeyBzdGF0U3luYywgcmVhZGRpclN5bmMsIG1rZGlyU3luYyB9IGZyb20gJ2ZzJ1xuXG5leHBvcnQgY2xhc3MgQ3Jvc3NDdXR0aW5nQ29uY2VybnMge1xuICAgIHByaXZhdGUgZnNhOiBGaWxlU3lzdGVtQWRhcHRlcjtcbiAgICBwcml2YXRlIGRvY0ZvbGRlcnM6IERvY0ZvbGRlcnM7XG4gICAgcHJpdmF0ZSB1dGlsczogVXRpbHM7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgZG9jRm9sZGVyczogRG9jRm9sZGVycykge1xuICAgICAgICB0aGlzLnV0aWxzID0gbmV3IFV0aWxzKGFwcCk7XG4gICAgICAgIHRoaXMuZnNhID0gdGhpcy51dGlscy5mc2E7XG4gICAgICAgIHRoaXMuZG9jRm9sZGVycyA9IGRvY0ZvbGRlcnM7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVDcm9zc0N1dHRpbmdDb25jZXJucygpIHtcbiAgICAgICAgY29uc3QgZG9jdW1lbnRUb01hcmtlck1hcCA9IG5ldyBNYXA8c3RyaW5nLCBTZXQ8c3RyaW5nPj47XG4gICAgICAgIGNvbnN0IHRlc3REb2N1bWVudFRvTWFya2VyTWFwID0gbmV3IE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PjtcbiAgICAgICAgY29uc3Qgc3RvcnlUb01hcmtlck1hcCA9IG5ldyBNYXA8c3RyaW5nLCBTZXQ8c3RyaW5nPj47XG4gICAgICAgIGNvbnN0IHRlc3RTdG9yeVRvTWFya2VyTWFwID0gbmV3IE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PjtcbiAgICAgICAgY29uc3QgbWFya2VyVG9TdG9yeU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG4gICAgICAgIGNvbnN0IG1hcmtlclRvVGVzdFN0b3J5TWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcbiAgICAgICAgY29uc3QgbWFya2VyVG9Eb2N1bWVudE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG4gICAgICAgIGNvbnN0IG1hcmtlclRvVGVzdERvY3VtZW50TWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcbiAgICAgICAgLy8gZ2V0IGFsbCB0aGUgc29sdXRpb25zIGZpbGVzIHRvIGRlbGV0ZVxuICAgICAgICAvL1xuICAgICAgICBjb25zdCBwcm9taXNlOiBBcnJheTxQcm9taXNlPHZvaWQ+PiA9IG5ldyBBcnJheTxQcm9taXNlPHZvaWQ+PigpO1xuICAgICAgICBjb25zdCBzb2x1dGlvbkZpbGVUb0RlbGV0ZSA9IHRoaXMudXRpbHMubGlzdE1ERmlsZXNJblZhdWx0KHRoaXMuZG9jRm9sZGVycy5zZXR0aW5nc1NvbHV0aW9uRm9sZGVyKTtcbiAgICAgICAgc29sdXRpb25GaWxlVG9EZWxldGUuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgICAgICAgIHByb21pc2UucHVzaCh0aGlzLmZzYS5yZW1vdmUoZmlsZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gd2FpdCBmb3IgYWxsIHByb21pc2VzIHRvIGNvbXBsZXRlXG4gICAgICAgIC8vXG4gICAgICAgIFByb21pc2UuYWxsU2V0dGxlZChwcm9taXNlKVxuICAgICAgICAgICAgLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gY2xlYW51cCB0YXJnZXQgZm9sZGVycywgYnkgdGhlIHRpbWUgdGhlIGZvbGRlcnMgYXJlIGdvdHRlbiBcbiAgICAgICAgICAgICAgICAvLyBpbiBuZXh0IGxpbmVzIHRoaXMgY2xlYW51cCBpcyBkb25lXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICB0aGlzLmZzYS5ybWRpcih0aGlzLmRvY0ZvbGRlcnMuc2V0dGluZ3NTb2x1dGlvbkZvbGRlciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mc2EubWtkaXIodGhpcy5kb2NGb2xkZXJzLnNldHRpbmdzU29sdXRpb25Gb2xkZXIpO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gZ2V0IGxpc3Qgb2YgbWQgZmlsZXMgaW4gdGhlIGNvbW1lbnQgYW5kIHRlc3QgZm9sZGVyIG9mIHRoZSBkb2N1bWVudHNcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRNREZpbGVzID0gdGhpcy51dGlscy5saXN0TURGaWxlc0luVmF1bHQodGhpcy5kb2NGb2xkZXJzLnNldHRpbmdzQ29tbWVudEZvbGRlcik7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVzdENvbW1lbnRNREZpbGVzID0gdGhpcy51dGlscy5saXN0TURGaWxlc0luVmF1bHQodGhpcy5kb2NGb2xkZXJzLnNldHRpbmdzVGVzdENvbW1lbnRGb2xkZXIpO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gZ2V0IGxpc3Qgb2YgbWQgZmlsZXMgaW4gdGhlIHN0b3J5IGZvbGRlclxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcnlNREZpbGVzID0gdGhpcy51dGlscy5saXN0TURGaWxlc0luVmF1bHQodGhpcy5kb2NGb2xkZXJzLnNldHRpbmdzU3RvcnlGb2xkZXIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlc3RTdG9yeU1ERmlsZXMgPSB0aGlzLnV0aWxzLmxpc3RNREZpbGVzSW5WYXVsdCh0aGlzLmRvY0ZvbGRlcnMuc2V0dGluZ3NVbml0VGVzdEZvbGRlcik7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBwaWNrIHVwIGFsbCBtYXJrZXJzIGluIHRoZSBkb2Mgc3RyaW5nIGRvYyBmaWxlIGJ5IGRvYyBmaWxlIGFuZCBhZ2dyZWdhdGUgdGhlIG1hcmtlcnNcbiAgICAgICAgICAgICAgICAvLyBiZWZvcmUgcHJvY2Vzc2luZyB0aGVtXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICBjb25zdCBhbGxQcm9taXNlcyA9IG5ldyBBcnJheTxQcm9taXNlPHZvaWQ+PigpO1xuICAgICAgICAgICAgICAgIGNvbW1lbnRNREZpbGVzLmZvckVhY2goY29tbWVudEZpbGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhbGxQcm9taXNlcy5wdXNoKHRoaXMuZnNhLnJlYWQoY29tbWVudEZpbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlclNldCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGFsbCB0aGUgbWFya2VycyBpbiB0aGUgdmFsdWUgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXJzTWF0Y2ggPSB2YWx1ZS5tYXRjaEFsbCh0aGlzLnV0aWxzLm1hcmtlclJlZ0V4cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbShtYXJrZXJzTWF0Y2gpLmZvckVhY2gobWFya2VyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyU2V0LmFkZChtYXJrZXJbMF0udHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclNldCA9IHRoaXMudXRpbHMuc29ydFNldE9mU3RyaW5nKG1hcmtlclNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9jdW1lbnROYW1lID0gY29tbWVudEZpbGUuc3BsaXQoJy8nKS5sYXN0KCkgYXMgc3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclNldC5mb3JFYWNoKG1hcmtlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclRvRG9jdW1lbnRNYXAuc2V0KG1hcmtlci50cmltKCksIGRvY3VtZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50TmFtZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRUb01hcmtlck1hcC5zZXQoZG9jdW1lbnROYW1lLCBtYXJrZXJTZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB0ZXN0Q29tbWVudE1ERmlsZXMuZm9yRWFjaChjb21tZW50RmlsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFsbFByb21pc2VzLnB1c2godGhpcy5mc2EucmVhZChjb21tZW50RmlsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgYWxsIHRoZSBtYXJrZXJzIGluIHRoZSB2YWx1ZSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlcnNNYXRjaCA9IHZhbHVlLm1hdGNoQWxsKHRoaXMudXRpbHMubWFya2VyUmVnRXhwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKG1hcmtlcnNNYXRjaCkuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJTZXQuYWRkKG1hcmtlclswXS50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyU2V0ID0gdGhpcy51dGlscy5zb3J0U2V0T2ZTdHJpbmcobWFya2VyU2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudE5hbWUgPSBjb21tZW50RmlsZS5zcGxpdCgnLycpLmxhc3QoKSBhcyBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyU2V0LmZvckVhY2gobWFya2VyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyVG9UZXN0RG9jdW1lbnRNYXAuc2V0KG1hcmtlci50cmltKCksIGRvY3VtZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50TmFtZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdERvY3VtZW50VG9NYXJrZXJNYXAuc2V0KGRvY3VtZW50TmFtZSwgbWFya2VyU2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgc3RvcnlNREZpbGVzLmZvckVhY2goc3RvcnlGaWxlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsUHJvbWlzZXMucHVzaCh0aGlzLmZzYS5yZWFkKHN0b3J5RmlsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgYWxsIHRoZSBtYXJrZXJzIGluIHRoZSB2YWx1ZSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlcnNNYXRjaCA9IHZhbHVlLm1hdGNoQWxsKHRoaXMudXRpbHMubWFya2VyUmVnRXhwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKG1hcmtlcnNNYXRjaCkuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJTZXQuYWRkKG1hcmtlclswXS50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyU2V0ID0gdGhpcy51dGlscy5zb3J0U2V0T2ZTdHJpbmcobWFya2VyU2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudE5hbWUgPSBzdG9yeUZpbGUuc3BsaXQoJy8nKS5sYXN0KCkgYXMgc3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclNldC5mb3JFYWNoKG1hcmtlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclRvU3RvcnlNYXAuc2V0KG1hcmtlci50cmltKCksIHN0b3J5RmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50TmFtZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcnlUb01hcmtlck1hcC5zZXQoZG9jdW1lbnROYW1lLCBtYXJrZXJTZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB0ZXN0U3RvcnlNREZpbGVzLmZvckVhY2goc3RvcnlGaWxlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsUHJvbWlzZXMucHVzaCh0aGlzLmZzYS5yZWFkKHN0b3J5RmlsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgYWxsIHRoZSBtYXJrZXJzIGluIHRoZSB2YWx1ZSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlcnNNYXRjaCA9IHZhbHVlLm1hdGNoQWxsKHRoaXMudXRpbHMubWFya2VyUmVnRXhwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKG1hcmtlcnNNYXRjaCkuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJTZXQuYWRkKG1hcmtlclswXS50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyU2V0ID0gdGhpcy51dGlscy5zb3J0U2V0T2ZTdHJpbmcobWFya2VyU2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudE5hbWUgPSBzdG9yeUZpbGUuc3BsaXQoJy8nKS5sYXN0KCkgYXMgc3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclNldC5mb3JFYWNoKG1hcmtlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclRvVGVzdFN0b3J5TWFwLnNldCh0aGlzLmRyb3BSaWdodEFuZE1rU3RyaW5nKG1hcmtlci50cmltKCkuc3BsaXQoXCItXCIpLCA0LCBcIi1cIiksIHN0b3J5RmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50TmFtZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFN0b3J5VG9NYXJrZXJNYXAuc2V0KGRvY3VtZW50TmFtZSwgbWFya2VyU2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5hbGxTZXR0bGVkKGFsbFByb21pc2VzKVxuICAgICAgICAgICAgICAgICAgICAudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29sbGVjdCBhbGwgbWFya2VycyBpbiBvbmUgbGlzdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc29ydCB0aGVtIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdyb3VwIGJ5IHBhdGgvbmFtZS5tZCBleGNsdWRpbmcgdGhlIHNlcSBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RPZk1hcmtlcnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5pdFRlc3RNYXJrZXJzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGRvY3VtZW50VG9NYXJrZXJNYXAudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goc2V0T2ZNYXJrZXJzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9hbExpc3RPZk1hcmtlcnM6IHN0cmluZ1tdID0gQXJyYXkuZnJvbShzZXRPZk1hcmtlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0T2ZNYXJrZXJzID0gbGlzdE9mTWFya2Vycy5jb25jYXQobG9hbExpc3RPZk1hcmtlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbSh0ZXN0RG9jdW1lbnRUb01hcmtlck1hcC52YWx1ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChzZXRPZk1hcmtlcnMgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2FsTGlzdE9mTWFya2Vyczogc3RyaW5nW10gPSBBcnJheS5mcm9tKHNldE9mTWFya2Vycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRUZXN0TWFya2VycyA9IHVuaXRUZXN0TWFya2Vycy5jb25jYXQobG9hbExpc3RPZk1hcmtlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdE9mTWFya2Vycy5zb3J0KChhLCBiKSA9PiBhLmxvY2FsZUNvbXBhcmUoYikpXG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0VGVzdE1hcmtlcnMuc29ydCgoYSwgYikgPT4gYS5sb2NhbGVDb21wYXJlKGIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsbE1hcmtlcnMgPSB0aGlzLmdyb3VwZWRNYXAobGlzdE9mTWFya2VycywgaSA9PiB0aGlzLnNvbHV0aW9uRG9jTmFtZUZyb21NYXJrZXIoaSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsbFVuaXRUZXN0TWFya2VycyA9IHRoaXMuZ3JvdXBlZFVuaXRUZXN0TWFwKHVuaXRUZXN0TWFya2Vycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGFsbE1hcmtlcnMpLmZvckVhY2goKFtzb2xOYW1lLCBtYXJrZXJzXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZFN0cmluZyA9IGAjICR7dGhpcy5kcm9wUmlnaHRBbmRNa1N0cmluZyhzb2xOYW1lLnNwbGl0KFwiL1wiKSwgMSwgXCIgXCIpLnRvVXBwZXJDYXNlKCl9XFxuYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1aWxkIGxpbmsgdG8gc3RvcnksIGZpbHRlciB0aGUgc3RvcnkgbWFya2VycyBhcyB3ZWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyVG9TdG9yeTogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20obWFya2VyVG9TdG9yeU1hcC5lbnRyaWVzKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChba2V5XSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwbGl0TWFya2VyID0ga2V5LnNwbGl0KFwiLVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFya2Vyc1swXS5zdGFydHNXaXRoKHRoaXMuZHJvcFJpZ2h0QW5kTWtTdHJpbmcoc3BsaXRNYXJrZXIsIDEsICctJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXR1cCBkaWUgc3RvcnkgbGlua3MgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWRTdHJpbmcgPSBtZFN0cmluZyArICcjIyBGdW5jdGlvbmFsIFJlcXVpcmVtZW50XFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJUb1N0b3J5LmZvckVhY2goKHN0b3J5LCBtYXJrZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlclRvU3RvcnlNYXAuZ2V0KG1hcmtlcikgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZFN0cmluZyA9IG1kU3RyaW5nICsgYCFbWyR7bWFya2VyVG9TdG9yeU1hcC5nZXQobWFya2VyKX0jJHttYXJrZXIudHJpbSgpfV1dXFxuYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5pcXVlTWFrZXJzID0gQXJyYXkuZnJvbShuZXcgU2V0KG1hcmtlcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmlxdWVNYWtlcnMuZm9yRWFjaCgobWFya2VyLCBzdG9yeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZFN0cmluZyA9IG1kU3RyaW5nICsgJyMjIEltcGxpbWVudGF0aW9uIFNvbHV0aW9uXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlclRvRG9jdW1lbnRNYXAuZ2V0KG1hcmtlcikgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IG1hcmtlclRvRG9jdW1lbnRNYXAuZ2V0KG1hcmtlcikhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWRTdHJpbmcgPSBtZFN0cmluZyArIGAhW1ske2RvY3VtZW50fSMke21hcmtlci50cmltKCl9XV1cXG5gO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHVuaXQgdGVzdHMgZm9yIHRoZSBkb2N1bWVudCBleGlzIHRoZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByaW50IG91dCB0aGVzZSB1bml0IHRlc3RzIC0gdGhlcmUgYmUgZHJhZ29ucyBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbFVuaXRUZXN0TWFya2Vycy5nZXQobWFya2VyKSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZFN0cmluZyA9IG1kU3RyaW5nICsgJyMjIyBVbml0IFRlc3QgSW1wbGVtZW50YXRpb25cXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFVuaXRUZXN0TWFya2Vycy5nZXQobWFya2VyKSEuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1Rlc3RNYXJrZXIobWFya2VyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWRTdHJpbmcgPSBtZFN0cmluZyArIGAhW1ske21hcmtlclRvVGVzdERvY3VtZW50TWFwLmdldChtYXJrZXIpfSMke21hcmtlci50cmltKCl9XV1cXG5gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBmb2xkZXIgcGF0aCBpZiByZXF1aXJlZCBhbmQgd3JpdGUgb3V0IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbHMubWFrZURpckluVmF1bHQoc29sTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mc2Eud3JpdGUoc29sTmFtZSwgbWRTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB2YWx1ZXMgZHJvcCB0aGUgcmlnaHRtb3N0IG50aCBzdHJpbmcgYW5kIGpvaW4gdXNpbmcgdGhlIGRlbGltaXRlclxuICAgICAqIEBwYXJhbSBuIHN0cmluZyB0byBkcm9wIG9uIHRoZSByaWdodFxuICAgICAqIEBwYXJhbSBkZWxpbWl0ZXIgdXNlZCB0byBqb2luIFxuICAgICAqIEByZXR1cm5zIHJlc3VsdGluZyBzdHJpbmdcbiAgICAgKi9cbiAgICBwcml2YXRlIGRyb3BSaWdodEFuZE1rU3RyaW5nKHZhbHVlczogc3RyaW5nW10sIG46IG51bWJlciwgZGVsaW1pdGVyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdmFsdWVzLnNsaWNlKDAsIHZhbHVlcy5sZW5ndGggLSAobikpLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gdmFsdWVzIGRyb3AgdGhlIGxlZnRtb3N0IG50aCBzdHJpbmcgYW4gcmV0dXJuIHRoZSByZXN1bHRcbiAgICAgKiBAcGFyYW0gbiBzdHJpbmcgdG8gZHJvcCBvbiB0aGUgcmlnaHRcbiAgICAgKiBAcGFyYW0gZGVsaW1pdGVyIHVzZWQgdG8gam9pbiBcbiAgICAgKiBAcmV0dXJucyByZXN1bHRpbmcgc3RyaW5nXG4gICAgICovXG4gICAgcHJpdmF0ZSBkcm9wTGVmdEFuZE1rU3RyaW5nKHZhbHVlczogc3RyaW5nW10sIG46IG51bWJlciwgZGVsaW1pdGVyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdmFsdWVzLnNsaWNlKG4sIHZhbHVlcy5sZW5ndGggLSAobikpLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzcGxpdCBzb2xOYW1lIGluIGdyb3VwcyBvZiAyIGpvaW5lZCBieSAvXG4gICAgICogQHBhcmFtIHNvbE5hbWUgc29sdXRpb24gbmFtZVxuICAgICAqIEBwYXJhbSBtYXBwaW5nIG1hcmtlclNldFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0U29sdXRpb25GaWxlTmFtZShzb2xOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBmaWxlTmFtZVBhcnRzID0gc29sTmFtZS5zcGxpdChcIi1cIilcbiAgICAgICAgdmFyIGZpbGVOYW1lOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWxlTmFtZVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSAlIDIgPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChpID09IGZpbGVOYW1lUGFydHMubGVuZ3RoIC0gMikge1xuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZS5wdXNoKGZpbGVOYW1lUGFydHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lLnB1c2goZmlsZU5hbWVQYXJ0c1tpXSArIFwiLVwiICsgZmlsZU5hbWVQYXJ0c1tpICsgMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYC8ke2ZpbGVOYW1lLmpvaW4oXCIvXCIpfWBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlIGEgbWFya2VyIHN0cmluZyBhbmQgY29udmVydCBpbnRvIGZpbGUgcGF0aCAvIGZpbGUgbmFtZS5tZC4gb2YgdGhlIG1hcmtlciBcbiAgICAgKiBleGNsdWRpbmcgdGhlIC1bMC05XSsgYXQgdGhlIGVuZCwgaXMgaW4gbWFwcGluZyB0aGVuIHVzZSB0aGF0IG1hcHBpbmcgdmFsdWUuXG4gICAgICogbWFya2VycyBoYXZlIHRoZSBmb2xsbG93aW5nIGZvcm1hdCA6XG4gICAgICogXG4gICAgICogMS4gXkpJUkExMjM0LTAwMSA8XG4gICAgICogMi4gXkpJUkExMjM0LTAwMS1zb2x1dGlvbi0wMDFcbiAgICAgKiAzLiBeSklSQTEyMzQtMDAxLXNvbHV0aW9uLTAwMS10ZXN0LTAwMVxuICAgICAqIFxuICAgICAqIDEgbWFya2VyIGNvbnZlcnRlZCB0byBmaWxlbmFtZVxuICAgICAqIDIgbWFya2VyIGNvbnZlcnRlZCB0byBwYXRoICsgZmlsZW5hbWVcbiAgICAgKiAzIG1hcmtlciBjb252ZXJ0ZWQgdG8gcGF0aCArIGZpbGVuYW5tZSB3aGVyZSAtIGlkZW50aWNhbCB0byAyLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBtYXJrZXIgaW4gZG9jdW1lbnQgc3RyaW5nXG4gICAgICogQHJldHVybiB0aGUgbmFtZSBvZiB0aGUgcGF0aCBhbmQgZmlsZSBuYW1lLm1kXG4gICAgICovXG4gICAgcHJpdmF0ZSBzb2x1dGlvbkRvY05hbWVGcm9tTWFya2VyKG1hcmtlcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgZG9jTmFtZSA9IHRoaXMuZ2V0U29sdXRpb25GaWxlTmFtZShtYXJrZXIucmVwbGFjZShcIl5cIiwgXCJcIikpO1xuICAgICAgICBjb25zdCBzb2x1dGlvbk5hbWUgPSBgJHtkb2NOYW1lfS5tZGA7XG4gICAgICAgIHJldHVybiBgLyR7dGhpcy5kb2NGb2xkZXJzLnNldHRpbmdzU29sdXRpb25Gb2xkZXJ9JHtzb2x1dGlvbk5hbWV9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHcm91cCBieSB0aGUgbGlzdCBhY2NvcmRpbmcgdG8gYSBnZXRLZXkgZnVuY3Rpb24uIEl0IHdpbGwgYmUgb25lIGtleSBcbiAgICAgKiB0byBtYW55IHBvdGVudGlhbCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gbGlzdCBvZiBlbGVtZW50cyB0byBncm91cCBieVxuICAgICAqIEBwYXJhbSBnZXRLZXkgZ3JvdXAgYnkga2V5XG4gICAgICogQHJldHVybnMgdGhlIGdyb3VwZWQgbGlzdFxuICAgICAqL1xuICAgIHByaXZhdGUgZ3JvdXBlZE1hcChhcnJheTogc3RyaW5nW10sIGdldEtleTogKGk6IHN0cmluZykgPT4gc3RyaW5nKTogTWFwPHN0cmluZywgc3RyaW5nW10+IHtcbiAgICAgICAgcmV0dXJuIGFycmF5LnJlZHVjZSgobWFwLCBjdXJyZW50VmFsdWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGdldEtleShjdXJyZW50VmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAoIW1hcC5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIG1hcC5zZXQoa2V5LCBbXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtYXAuZ2V0KGtleSkgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWFwPy5nZXQoa2V5KT8ucHVzaChjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICB9LCBuZXcgTWFwPHN0cmluZywgc3RyaW5nW10+KCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyb3VwIGJ5IHRoZSBsaXN0IGFjY29yZGluZyB0byBhIGdldEtleSBmdW5jdGlvbi4gSXQgd2lsbCBiZSBvbmUga2V5IFxuICAgICAqIHRvIG1hbnkgcG90ZW50aWFsIHZhbHVlc1xuICAgICAqIEBwYXJhbSBsaXN0IG9mIGVsZW1lbnRzIHRvIGdyb3VwIGJ5LCBUaGUgbGlzdCBpbiB0aGlzIGNhc2Ugd2lsbCBjb250YWluIHN0cmluZyBmb3JtYXR0ZWRcbiAgICAgKiBhcyBKSVJBMTIzNC0wMDEtc29sdXRpb24tMDAxLXRlc3QtMDAxLiBcbiAgICAgKiBAcGFyYW0gZ2V0S2V5IGdyb3VwIGJ5IGtleVxuICAgICAqIEByZXR1cm5zIHRoZSBncm91cGVkIGxpc3QuIFRoZSBNYXA8c29sTmFtZSwgTWFwPERvY3VtZW50IE1hcmtlciBtYXJrZXIgbGluaywgTGlzdDxzdHJpbmc+KFVuaXQgdGVzdCBsaW5rcyk+ID5cbiAgICAgKi9cbiAgICBwcml2YXRlIGdyb3VwZWRVbml0VGVzdE1hcChhcnJheTogc3RyaW5nW10pOiBNYXA8c3RyaW5nLCBzdHJpbmdbXT4ge1xuICAgICAgICByZXR1cm4gYXJyYXkucmVkdWNlKChtYXAsIGN1cnJlbnRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gY3VycmVudFZhbHVlLnNwbGl0KFwiLVwiKTtcbiAgICAgICAgICAgIGNvbnN0IGtleVZhbHVlID0gdGhpcy5kcm9wUmlnaHRBbmRNa1N0cmluZyhrZXksIDIsIFwiLVwiKTtcblxuICAgICAgICAgICAgaWYgKCFtYXAuaGFzKGtleVZhbHVlKSkge1xuICAgICAgICAgICAgICAgIG1hcC5zZXQoa2V5VmFsdWUsIFtdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1hcC5nZXQoa2V5VmFsdWUpICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1hcD8uZ2V0KGtleVZhbHVlKT8ucHVzaChjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICB9LCBuZXcgTWFwPHN0cmluZywgc3RyaW5nW10+KCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGlzIHRoaXMgYSB0ZXN0IG1hcmtlclxuICAgICAqIEBwYXJhbSBtYXJrZXIgdG8gY2hlY2sgaXMgaXQgaGFzIGxlZ3RoIDZcbiAgICAgKiBAcmV0dXJucyBcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzVGVzdE1hcmtlcihtYXJrZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gbWFya2VyLnNwbGl0KFwiLVwiKS5sZW5ndGggPT0gOFxuICAgIH1cblxufVxuIiwgImltcG9ydCB7IEFwcCB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi9VdGlscydcbmltcG9ydCB7IERvY0ZvbGRlcnMgfSBmcm9tICcuL0RvY0ZvbGRlcnMnO1xuXG5leHBvcnQgY2xhc3MgTWFya2VyR3JvdXBMaXN0IHtcblxuICAgIG1hcmtlckZpbGVXaXRoUGF0aCA6IHN0cmluZztcbiAgICB1dGlscyA6IFV0aWxzO1xuICAgIGRvY0ZvbGRlcnMgOiBEb2NGb2xkZXJzO1xuXG4gICAgY29uc3RydWN0b3IoYXBwIDogQXBwLCBkb2NGb2xkZXJzIDogRG9jRm9sZGVycykge1xuICAgICAgICB0aGlzLm1hcmtlckZpbGVXaXRoUGF0aCA9IGAke2RvY0ZvbGRlcnMuc2V0dGluZ3NNYXJrZXJGb2xkZXJ9L21hcmtlci10YWJsZS5tZGBcbiAgICAgICAgdGhpcy51dGlscyA9IG5ldyBVdGlscyhhcHApO1xuICAgICAgICB0aGlzLmRvY0ZvbGRlcnMgPSBkb2NGb2xkZXJzO1xuICAgIH1cblxuICAgIGdlbmVyYXRlTWFrZXJHcm91cExpc3QoKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHNvbWUgY29udGFpbmVycyB0byB1c2UgbGF0ZXIgb25cbiAgICAgICAgLy9cbiAgICAgICAgY29uc3QgbWFya2VyVG9Eb2N1bWVudE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBTZXQ8c3RyaW5nPj4oKTtcbiAgICAgICAgY29uc3QgbWFya2VyVG9UZXN0RG9jdW1lbnRNYXAgPSBuZXcgTWFwPHN0cmluZywgU2V0PHN0cmluZz4+KCk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGdldCBhbGwgdGhlIGRvYyBmaWxlcyB0byBzY2FuXG4gICAgICAgIC8vXG4gICAgICAgIGNvbnN0IGNvbW1lbnRGaWxlcyA9IHRoaXMudXRpbHMubGlzdE1ERmlsZXNJblZhdWx0KHRoaXMuZG9jRm9sZGVycy5zZXR0aW5nc0NvbW1lbnRGb2xkZXIpO1xuICAgICAgICBjb25zdCB0ZXN0Q29tbWVudEZpbGVzID0gdGhpcy51dGlscy5saXN0TURGaWxlc0luVmF1bHQodGhpcy5kb2NGb2xkZXJzLnNldHRpbmdzVGVzdENvbW1lbnRGb2xkZXIpO1xuICAgICAgICAvL1xuICAgICAgICAvLyBwaWNrIHVwIGFsbCBtYXJrZXJzIGluIHRoZSBkb2Mgc3RyaW5nIGRvYyBmaWxlIGJ5IGRvYyBmaWxlIGFuZCBhZ2dyZWdhdGUgdGhlIG1hcmtlcnNcbiAgICAgICAgLy8gYmVmb3JlIHByb2Nlc3NpbmcgdGhlbVxuICAgICAgICAvL1xuICAgICAgICBjb25zdCBwcm9taXNlOiBBcnJheTxQcm9taXNlPHZvaWQ+PiA9IG5ldyBBcnJheTxQcm9taXNlPHZvaWQ+PigpO1xuICAgICAgICBjb21tZW50RmlsZXMuZm9yRWFjaChjb21tZW50RmlsZSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlLnB1c2godGhpcy51dGlscy5mc2EucmVhZChjb21tZW50RmlsZSlcbiAgICAgICAgICAgICAgICAudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGFsbCB0aGUgbWFya2VycyBpbiB0aGUgdmFsdWUgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya2Vyc01hdGNoID0gdmFsdWUubWF0Y2hBbGwodGhpcy51dGlscy5tYXJrZXJSZWdFeHApO1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbShtYXJrZXJzTWF0Y2gpLmZvckVhY2gobWFya2VyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJTZXQuYWRkKG1hcmtlclswXS50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclNldCA9IHRoaXMudXRpbHMuc29ydFNldE9mU3RyaW5nKG1hcmtlclNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJTZXQuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWFya2VyVG9Eb2N1bWVudE1hcC5oYXMobWFya2VyLnRyaW0oKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyVG9Eb2N1bWVudE1hcC5zZXQobWFya2VyLCBuZXcgU2V0PHN0cmluZz4oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclRvRG9jdW1lbnRNYXAuZ2V0KG1hcmtlci50cmltKCkpPy5hZGQoY29tbWVudEZpbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSlcbiAgICAgICAgdGVzdENvbW1lbnRGaWxlcy5mb3JFYWNoKGNvbW1lbnRGaWxlID0+IHtcbiAgICAgICAgICAgIHByb21pc2UucHVzaCh0aGlzLnV0aWxzLmZzYS5yZWFkKGNvbW1lbnRGaWxlKVxuICAgICAgICAgICAgICAgIC50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXJTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgYWxsIHRoZSBtYXJrZXJzIGluIHRoZSB2YWx1ZSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXJzTWF0Y2ggPSB2YWx1ZS5tYXRjaEFsbCh0aGlzLnV0aWxzLm1hcmtlclJlZ0V4cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKG1hcmtlcnNNYXRjaCkuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclNldC5hZGQobWFya2VyWzBdLnRyaW0oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyU2V0ID0gdGhpcy51dGlscy5zb3J0U2V0T2ZTdHJpbmcobWFya2VyU2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclNldC5mb3JFYWNoKG1hcmtlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXJrZXJUb1Rlc3REb2N1bWVudE1hcC5oYXMobWFya2VyLnRyaW0oKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyVG9UZXN0RG9jdW1lbnRNYXAuc2V0KG1hcmtlciwgbmV3IFNldDxzdHJpbmc+KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJUb1Rlc3REb2N1bWVudE1hcC5nZXQobWFya2VyLnRyaW0oKSk/LmFkZChjb21tZW50RmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KVxuICAgICAgICBQcm9taXNlLmFsbFNldHRsZWQocHJvbWlzZSlcbiAgICAgICAgICAgIC50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGxNYXJrZXJzID0gQXJyYXkuZnJvbShtYXJrZXJUb0RvY3VtZW50TWFwLmtleXMoKSkuc29ydCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1kU3RyaW5nID0gXCJDb2RlIGFuZCBDb2RlIFN0b3J5IGxpbmtzXFxuXFxuXCI7XG4gICAgICAgICAgICAgICAgbWRTdHJpbmcgPSBtZFN0cmluZyArIGB8bWFya2VyfGRvY3VtZW50fFxcbmA7XG4gICAgICAgICAgICAgICAgbWRTdHJpbmcgPSBtZFN0cmluZyArIGB8LS0tLS0tfC0tLS0tLS0tfFxcbmA7XG4gICAgICAgICAgICAgICAgYWxsTWFya2Vycy5mb3JFYWNoKG1hcmtlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvY05hbWVTZXQgPSBtYXJrZXJUb0RvY3VtZW50TWFwLmdldChtYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyBidWlsZCBtYXJrZXIgdG8gZG9jIGVudHJ5IGZyb20gdGhlIHNldCBvZiBkb2N1bWVudCBuYW1lcy5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgZG9jTmFtZVNldD8uZm9yRWFjaChkb2NOYW1lID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1kU3RyaW5nID0gbWRTdHJpbmcgKyBgfCR7bWFya2VyLnN1YnN0cmluZygxKX18W1ske2RvY05hbWV9IyR7bWFya2VyfV1dXFxuYDtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgY29uc3QgYWxsVGVzdE1hcmtlcnMgPSBBcnJheS5mcm9tKG1hcmtlclRvVGVzdERvY3VtZW50TWFwLmtleXMoKSkuc29ydCgpO1xuXG4gICAgICAgICAgICAgICAgbWRTdHJpbmcgPSBtZFN0cmluZyArIFwiXFxuVGVzdCBhbmQgVGVzdCBTdG9yeSBsaW5rc1xcblxcblwiO1xuICAgICAgICAgICAgICAgIG1kU3RyaW5nID0gbWRTdHJpbmcgKyBgfG1hcmtlcnxkb2N1bWVudHxcXG5gO1xuICAgICAgICAgICAgICAgIG1kU3RyaW5nID0gbWRTdHJpbmcgKyBgfC0tLS0tLXwtLS0tLS0tLXxcXG5gO1xuICAgICAgICAgICAgICAgIGFsbFRlc3RNYXJrZXJzLmZvckVhY2gobWFya2VyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9jTmFtZVNldCA9IG1hcmtlclRvVGVzdERvY3VtZW50TWFwLmdldChtYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyBidWlsZCBtYXJrZXIgdG8gdGVzdCBkb2MgZW50cnkgZnJvbSB0aGUgc2V0IG9mIGRvY3VtZW50IG5hbWVzLlxuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICBkb2NOYW1lU2V0Py5mb3JFYWNoKGRvY05hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWRTdHJpbmcgPSBtZFN0cmluZyArIGB8JHttYXJrZXIuc3Vic3RyaW5nKDEpfXxbWyR7ZG9jTmFtZX0jJHttYXJrZXJ9XV1cXG5gO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMudXRpbHMuZnNhLndyaXRlKHRoaXMubWFya2VyRmlsZVdpdGhQYXRoLCBtZFN0cmluZyk7XG4gICAgICAgICAgICB9KVxuICAgIH1cbn0iLCAibGV0IHdhc207XG5cbmNvbnN0IGhlYXAgPSBuZXcgQXJyYXkoMTI4KS5maWxsKHVuZGVmaW5lZCk7XG5cbmhlYXAucHVzaCh1bmRlZmluZWQsIG51bGwsIHRydWUsIGZhbHNlKTtcblxuZnVuY3Rpb24gZ2V0T2JqZWN0KGlkeCkgeyByZXR1cm4gaGVhcFtpZHhdOyB9XG5cbmxldCBXQVNNX1ZFQ1RPUl9MRU4gPSAwO1xuXG5sZXQgY2FjaGVkVWludDhNZW1vcnkwID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0VWludDhNZW1vcnkwKCkge1xuICAgIGlmIChjYWNoZWRVaW50OE1lbW9yeTAgPT09IG51bGwgfHwgY2FjaGVkVWludDhNZW1vcnkwLmJ5dGVMZW5ndGggPT09IDApIHtcbiAgICAgICAgY2FjaGVkVWludDhNZW1vcnkwID0gbmV3IFVpbnQ4QXJyYXkod2FzbS5tZW1vcnkuYnVmZmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZFVpbnQ4TWVtb3J5MDtcbn1cblxuY29uc3QgY2FjaGVkVGV4dEVuY29kZXIgPSAodHlwZW9mIFRleHRFbmNvZGVyICE9PSAndW5kZWZpbmVkJyA/IG5ldyBUZXh0RW5jb2RlcigndXRmLTgnKSA6IHsgZW5jb2RlOiAoKSA9PiB7IHRocm93IEVycm9yKCdUZXh0RW5jb2RlciBub3QgYXZhaWxhYmxlJykgfSB9ICk7XG5cbmNvbnN0IGVuY29kZVN0cmluZyA9ICh0eXBlb2YgY2FjaGVkVGV4dEVuY29kZXIuZW5jb2RlSW50byA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZnVuY3Rpb24gKGFyZywgdmlldykge1xuICAgIHJldHVybiBjYWNoZWRUZXh0RW5jb2Rlci5lbmNvZGVJbnRvKGFyZywgdmlldyk7XG59XG4gICAgOiBmdW5jdGlvbiAoYXJnLCB2aWV3KSB7XG4gICAgY29uc3QgYnVmID0gY2FjaGVkVGV4dEVuY29kZXIuZW5jb2RlKGFyZyk7XG4gICAgdmlldy5zZXQoYnVmKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByZWFkOiBhcmcubGVuZ3RoLFxuICAgICAgICB3cml0dGVuOiBidWYubGVuZ3RoXG4gICAgfTtcbn0pO1xuXG5mdW5jdGlvbiBwYXNzU3RyaW5nVG9XYXNtMChhcmcsIG1hbGxvYywgcmVhbGxvYykge1xuXG4gICAgaWYgKHJlYWxsb2MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBidWYgPSBjYWNoZWRUZXh0RW5jb2Rlci5lbmNvZGUoYXJnKTtcbiAgICAgICAgY29uc3QgcHRyID0gbWFsbG9jKGJ1Zi5sZW5ndGgsIDEpID4+PiAwO1xuICAgICAgICBnZXRVaW50OE1lbW9yeTAoKS5zdWJhcnJheShwdHIsIHB0ciArIGJ1Zi5sZW5ndGgpLnNldChidWYpO1xuICAgICAgICBXQVNNX1ZFQ1RPUl9MRU4gPSBidWYubGVuZ3RoO1xuICAgICAgICByZXR1cm4gcHRyO1xuICAgIH1cblxuICAgIGxldCBsZW4gPSBhcmcubGVuZ3RoO1xuICAgIGxldCBwdHIgPSBtYWxsb2MobGVuLCAxKSA+Pj4gMDtcblxuICAgIGNvbnN0IG1lbSA9IGdldFVpbnQ4TWVtb3J5MCgpO1xuXG4gICAgbGV0IG9mZnNldCA9IDA7XG5cbiAgICBmb3IgKDsgb2Zmc2V0IDwgbGVuOyBvZmZzZXQrKykge1xuICAgICAgICBjb25zdCBjb2RlID0gYXJnLmNoYXJDb2RlQXQob2Zmc2V0KTtcbiAgICAgICAgaWYgKGNvZGUgPiAweDdGKSBicmVhaztcbiAgICAgICAgbWVtW3B0ciArIG9mZnNldF0gPSBjb2RlO1xuICAgIH1cblxuICAgIGlmIChvZmZzZXQgIT09IGxlbikge1xuICAgICAgICBpZiAob2Zmc2V0ICE9PSAwKSB7XG4gICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2Uob2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBwdHIgPSByZWFsbG9jKHB0ciwgbGVuLCBsZW4gPSBvZmZzZXQgKyBhcmcubGVuZ3RoICogMywgMSkgPj4+IDA7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBnZXRVaW50OE1lbW9yeTAoKS5zdWJhcnJheShwdHIgKyBvZmZzZXQsIHB0ciArIGxlbik7XG4gICAgICAgIGNvbnN0IHJldCA9IGVuY29kZVN0cmluZyhhcmcsIHZpZXcpO1xuXG4gICAgICAgIG9mZnNldCArPSByZXQud3JpdHRlbjtcbiAgICAgICAgcHRyID0gcmVhbGxvYyhwdHIsIGxlbiwgb2Zmc2V0LCAxKSA+Pj4gMDtcbiAgICB9XG5cbiAgICBXQVNNX1ZFQ1RPUl9MRU4gPSBvZmZzZXQ7XG4gICAgcmV0dXJuIHB0cjtcbn1cblxuZnVuY3Rpb24gaXNMaWtlTm9uZSh4KSB7XG4gICAgcmV0dXJuIHggPT09IHVuZGVmaW5lZCB8fCB4ID09PSBudWxsO1xufVxuXG5sZXQgY2FjaGVkSW50MzJNZW1vcnkwID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0SW50MzJNZW1vcnkwKCkge1xuICAgIGlmIChjYWNoZWRJbnQzMk1lbW9yeTAgPT09IG51bGwgfHwgY2FjaGVkSW50MzJNZW1vcnkwLmJ5dGVMZW5ndGggPT09IDApIHtcbiAgICAgICAgY2FjaGVkSW50MzJNZW1vcnkwID0gbmV3IEludDMyQXJyYXkod2FzbS5tZW1vcnkuYnVmZmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZEludDMyTWVtb3J5MDtcbn1cblxubGV0IGhlYXBfbmV4dCA9IGhlYXAubGVuZ3RoO1xuXG5mdW5jdGlvbiBkcm9wT2JqZWN0KGlkeCkge1xuICAgIGlmIChpZHggPCAxMzIpIHJldHVybjtcbiAgICBoZWFwW2lkeF0gPSBoZWFwX25leHQ7XG4gICAgaGVhcF9uZXh0ID0gaWR4O1xufVxuXG5mdW5jdGlvbiB0YWtlT2JqZWN0KGlkeCkge1xuICAgIGNvbnN0IHJldCA9IGdldE9iamVjdChpZHgpO1xuICAgIGRyb3BPYmplY3QoaWR4KTtcbiAgICByZXR1cm4gcmV0O1xufVxuXG5jb25zdCBjYWNoZWRUZXh0RGVjb2RlciA9ICh0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnID8gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcsIHsgaWdub3JlQk9NOiB0cnVlLCBmYXRhbDogdHJ1ZSB9KSA6IHsgZGVjb2RlOiAoKSA9PiB7IHRocm93IEVycm9yKCdUZXh0RGVjb2RlciBub3QgYXZhaWxhYmxlJykgfSB9ICk7XG5cbmlmICh0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnKSB7IGNhY2hlZFRleHREZWNvZGVyLmRlY29kZSgpOyB9O1xuXG5mdW5jdGlvbiBnZXRTdHJpbmdGcm9tV2FzbTAocHRyLCBsZW4pIHtcbiAgICBwdHIgPSBwdHIgPj4+IDA7XG4gICAgcmV0dXJuIGNhY2hlZFRleHREZWNvZGVyLmRlY29kZShnZXRVaW50OE1lbW9yeTAoKS5zdWJhcnJheShwdHIsIHB0ciArIGxlbikpO1xufVxuXG5mdW5jdGlvbiBhZGRIZWFwT2JqZWN0KG9iaikge1xuICAgIGlmIChoZWFwX25leHQgPT09IGhlYXAubGVuZ3RoKSBoZWFwLnB1c2goaGVhcC5sZW5ndGggKyAxKTtcbiAgICBjb25zdCBpZHggPSBoZWFwX25leHQ7XG4gICAgaGVhcF9uZXh0ID0gaGVhcFtpZHhdO1xuXG4gICAgaGVhcFtpZHhdID0gb2JqO1xuICAgIHJldHVybiBpZHg7XG59XG4vKipcbiogQHBhcmFtIHtzdHJpbmd9IHN0clxuKiBAcmV0dXJucyB7c3RyaW5nfVxuKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FuX2Zvcl9jb21tZW50cyhzdHIpIHtcbiAgICBjb25zdCByZXQgPSB3YXNtLnNjYW5fZm9yX2NvbW1lbnRzKGFkZEhlYXBPYmplY3Qoc3RyKSk7XG4gICAgcmV0dXJuIHRha2VPYmplY3QocmV0KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX193YmdfbG9hZChtb2R1bGUsIGltcG9ydHMpIHtcbiAgICBpZiAodHlwZW9mIFJlc3BvbnNlID09PSAnZnVuY3Rpb24nICYmIG1vZHVsZSBpbnN0YW5jZW9mIFJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKG1vZHVsZSwgaW1wb3J0cyk7XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAobW9kdWxlLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSAhPSAnYXBwbGljYXRpb24vd2FzbScpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiYFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nYCBmYWlsZWQgYmVjYXVzZSB5b3VyIHNlcnZlciBkb2VzIG5vdCBzZXJ2ZSB3YXNtIHdpdGggYGFwcGxpY2F0aW9uL3dhc21gIE1JTUUgdHlwZS4gRmFsbGluZyBiYWNrIHRvIGBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZWAgd2hpY2ggaXMgc2xvd2VyLiBPcmlnaW5hbCBlcnJvcjpcXG5cIiwgZSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJ5dGVzID0gYXdhaXQgbW9kdWxlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShieXRlcywgaW1wb3J0cyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKG1vZHVsZSwgaW1wb3J0cyk7XG5cbiAgICAgICAgaWYgKGluc3RhbmNlIGluc3RhbmNlb2YgV2ViQXNzZW1ibHkuSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGluc3RhbmNlLCBtb2R1bGUgfTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfX3diZ19nZXRfaW1wb3J0cygpIHtcbiAgICBjb25zdCBpbXBvcnRzID0ge307XG4gICAgaW1wb3J0cy53YmcgPSB7fTtcbiAgICBpbXBvcnRzLndiZy5fX3diaW5kZ2VuX3N0cmluZ19nZXQgPSBmdW5jdGlvbihhcmcwLCBhcmcxKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IGdldE9iamVjdChhcmcxKTtcbiAgICAgICAgY29uc3QgcmV0ID0gdHlwZW9mKG9iaikgPT09ICdzdHJpbmcnID8gb2JqIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgcHRyMSA9IGlzTGlrZU5vbmUocmV0KSA/IDAgOiBwYXNzU3RyaW5nVG9XYXNtMChyZXQsIHdhc20uX193YmluZGdlbl9tYWxsb2MsIHdhc20uX193YmluZGdlbl9yZWFsbG9jKTtcbiAgICAgICAgdmFyIGxlbjEgPSBXQVNNX1ZFQ1RPUl9MRU47XG4gICAgICAgIGdldEludDMyTWVtb3J5MCgpW2FyZzAgLyA0ICsgMV0gPSBsZW4xO1xuICAgICAgICBnZXRJbnQzMk1lbW9yeTAoKVthcmcwIC8gNCArIDBdID0gcHRyMTtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JpbmRnZW5fb2JqZWN0X2Ryb3BfcmVmID0gZnVuY3Rpb24oYXJnMCkge1xuICAgICAgICB0YWtlT2JqZWN0KGFyZzApO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmluZGdlbl9zdHJpbmdfbmV3ID0gZnVuY3Rpb24oYXJnMCwgYXJnMSkge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRTdHJpbmdGcm9tV2FzbTAoYXJnMCwgYXJnMSk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diaW5kZ2VuX3Rocm93ID0gZnVuY3Rpb24oYXJnMCwgYXJnMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZ2V0U3RyaW5nRnJvbVdhc20wKGFyZzAsIGFyZzEpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGltcG9ydHM7XG59XG5cbmZ1bmN0aW9uIF9fd2JnX2luaXRfbWVtb3J5KGltcG9ydHMsIG1heWJlX21lbW9yeSkge1xuXG59XG5cbmZ1bmN0aW9uIF9fd2JnX2ZpbmFsaXplX2luaXQoaW5zdGFuY2UsIG1vZHVsZSkge1xuICAgIHdhc20gPSBpbnN0YW5jZS5leHBvcnRzO1xuICAgIF9fd2JnX2luaXQuX193YmluZGdlbl93YXNtX21vZHVsZSA9IG1vZHVsZTtcbiAgICBjYWNoZWRJbnQzMk1lbW9yeTAgPSBudWxsO1xuICAgIGNhY2hlZFVpbnQ4TWVtb3J5MCA9IG51bGw7XG5cblxuICAgIHJldHVybiB3YXNtO1xufVxuXG5mdW5jdGlvbiBpbml0U3luYyhtb2R1bGUpIHtcbiAgICBpZiAod2FzbSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gd2FzbTtcblxuICAgIGNvbnN0IGltcG9ydHMgPSBfX3diZ19nZXRfaW1wb3J0cygpO1xuXG4gICAgX193YmdfaW5pdF9tZW1vcnkoaW1wb3J0cyk7XG5cbiAgICBpZiAoIShtb2R1bGUgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5Nb2R1bGUpKSB7XG4gICAgICAgIG1vZHVsZSA9IG5ldyBXZWJBc3NlbWJseS5Nb2R1bGUobW9kdWxlKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShtb2R1bGUsIGltcG9ydHMpO1xuXG4gICAgcmV0dXJuIF9fd2JnX2ZpbmFsaXplX2luaXQoaW5zdGFuY2UsIG1vZHVsZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9fd2JnX2luaXQoaW5wdXQpIHtcbiAgICBpZiAod2FzbSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gd2FzbTtcblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlucHV0ID0gbmV3IFVSTCgnb2JzaWRpYW5fcnVzdF9wbHVnaW5fYmcud2FzbScsIGltcG9ydC5tZXRhLnVybCk7XG4gICAgfVxuICAgIGNvbnN0IGltcG9ydHMgPSBfX3diZ19nZXRfaW1wb3J0cygpO1xuXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgKHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmIGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkgfHwgKHR5cGVvZiBVUkwgPT09ICdmdW5jdGlvbicgJiYgaW5wdXQgaW5zdGFuY2VvZiBVUkwpKSB7XG4gICAgICAgIGlucHV0ID0gZmV0Y2goaW5wdXQpO1xuICAgIH1cblxuICAgIF9fd2JnX2luaXRfbWVtb3J5KGltcG9ydHMpO1xuXG4gICAgY29uc3QgeyBpbnN0YW5jZSwgbW9kdWxlIH0gPSBhd2FpdCBfX3diZ19sb2FkKGF3YWl0IGlucHV0LCBpbXBvcnRzKTtcblxuICAgIHJldHVybiBfX3diZ19maW5hbGl6ZV9pbml0KGluc3RhbmNlLCBtb2R1bGUpO1xufVxuXG5leHBvcnQgeyBpbml0U3luYyB9XG5leHBvcnQgZGVmYXVsdCBfX3diZ19pbml0O1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFBaUY7OztBQ0FqRixzQkFBK0M7QUFHL0MsSUFBTSxXQUFXLFFBQVEsWUFBWTtBQUNyQyxJQUFNLFNBQVMsU0FBUztBQUVqQixJQUFNLHFCQUFOLGNBQWlDLGlDQUFpQjtBQUFBLEVBR3hELFlBQVksS0FBVSxRQUF1QjtBQUM1QyxVQUFNLEtBQUssTUFBTTtBQUNqQixTQUFLLFNBQVM7QUFBQSxFQUNmO0FBQUEsRUFFQSxVQUFnQjtBQUNmLFVBQU0sRUFBQyxnQkFBZTtBQUV0QixnQkFBWSxNQUFNO0FBS1osUUFBSSxLQUFLLE9BQU8sZ0JBQWdCO0FBQzVCLFVBQUksd0JBQVEsV0FBVyxFQUNsQixRQUFRLG9CQUFvQixFQUM1QixRQUFRLDBEQUEwRDtBQUFBLElBQzNFLE9BQU87QUFFSCxVQUFJLGlCQUFpQixJQUFJLHdCQUFRLFdBQVc7QUFFNUMscUJBQ0ssUUFBUSxrQkFBa0IsRUFDMUIsUUFBUSwwQkFBMEIsS0FBSyxPQUFPLFNBQVMsaUJBQWlCLEVBQ3hFLFVBQVUsWUFDUCxPQUNLLGNBQWMseUJBQXlCLEVBQ3ZDLFFBQVEsQ0FBQyxPQUNOO0FBQ0ksZUFBTyxlQUFlLEVBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDLEVBQ3JELEtBQUssT0FBTyxXQUFvRDtBQUM3RCxrQkFBUSxJQUFJLE9BQU8sUUFBUTtBQUMzQixrQkFBUSxJQUFJLE9BQU8sU0FBUztBQUM1QixlQUFLLE9BQU8sU0FBUyxrQkFBa0IsT0FBTyxVQUFVO0FBQ3hELHlCQUFlLFFBQVEsMEJBQTBCLEtBQUssT0FBTyxTQUFTLGlCQUFpQjtBQUN2Rixn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
